{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\services\\theme\\index.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\services\\theme\\index.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'; // Utilities\n\nimport * as ThemeUtils from './utils'; // Types\n\nimport Vue from 'vue';\nexport class Theme extends Service {\n  constructor(options = {}) {\n    super();\n    this.disabled = false;\n    this.themes = {\n      light: {\n        primary: '#1976D2',\n        secondary: '#424242',\n        accent: '#82B1FF',\n        error: '#FF5252',\n        info: '#2196F3',\n        success: '#4CAF50',\n        warning: '#FB8C00'\n      },\n      dark: {\n        primary: '#2196F3',\n        secondary: '#424242',\n        accent: '#FF4081',\n        error: '#FF5252',\n        info: '#2196F3',\n        success: '#4CAF50',\n        warning: '#FB8C00'\n      }\n    };\n    this.defaults = this.themes;\n    this.isDark = null;\n    this.vueInstance = null;\n    this.vueMeta = null;\n\n    if (options.disable) {\n      this.disabled = true;\n      return;\n    }\n\n    this.options = options.options;\n    this.dark = Boolean(options.dark);\n    const themes = options.themes || {};\n    this.themes = {\n      dark: this.fillVariant(themes.dark, true),\n      light: this.fillVariant(themes.light, false)\n    };\n  } // When setting css, check for element\n  // and apply new values\n\n\n  set css(val) {\n    if (this.vueMeta) {\n      if (this.isVueMeta23) {\n        this.applyVueMeta23();\n      }\n\n      return;\n    }\n\n    this.checkOrCreateStyleElement() && (this.styleEl.innerHTML = val);\n  }\n\n  set dark(val) {\n    const oldDark = this.isDark;\n    this.isDark = val; // Only apply theme after dark\n    // has already been set before\n\n    oldDark != null && this.applyTheme();\n  }\n\n  get dark() {\n    return Boolean(this.isDark);\n  } // Apply current theme default\n  // only called on client side\n\n\n  applyTheme() {\n    if (this.disabled) return this.clearCss();\n    this.css = this.generatedStyles;\n  }\n\n  clearCss() {\n    this.css = '';\n  } // Initialize theme for SSR and SPA\n  // Attach to ssrContext head or\n  // apply new theme to document\n\n\n  init(root, ssrContext) {\n    if (this.disabled) return;\n    /* istanbul ignore else */\n\n    if (root.$meta) {\n      this.initVueMeta(root);\n    } else if (ssrContext) {\n      this.initSSR(ssrContext);\n    }\n\n    this.initTheme();\n  } // Allows for you to set target theme\n\n\n  setTheme(theme, value) {\n    this.themes[theme] = Object.assign(this.themes[theme], value);\n    this.applyTheme();\n  } // Reset theme defaults\n\n\n  resetThemes() {\n    this.themes.light = Object.assign({}, this.defaults.light);\n    this.themes.dark = Object.assign({}, this.defaults.dark);\n    this.applyTheme();\n  } // Check for existence of style element\n\n\n  checkOrCreateStyleElement() {\n    this.styleEl = document.getElementById('vuetify-theme-stylesheet');\n    /* istanbul ignore next */\n\n    if (this.styleEl) return true;\n    this.genStyleElement(); // If doesn't have it, create it\n\n    return Boolean(this.styleEl);\n  }\n\n  fillVariant(theme = {}, dark) {\n    const defaultTheme = this.themes[dark ? 'dark' : 'light'];\n    return Object.assign({}, defaultTheme, theme);\n  } // Generate the style element\n  // if applicable\n\n\n  genStyleElement() {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return;\n    /* istanbul ignore next */\n\n    const options = this.options || {};\n    this.styleEl = document.createElement('style');\n    this.styleEl.type = 'text/css';\n    this.styleEl.id = 'vuetify-theme-stylesheet';\n\n    if (options.cspNonce) {\n      this.styleEl.setAttribute('nonce', options.cspNonce);\n    }\n\n    document.head.appendChild(this.styleEl);\n  }\n\n  initVueMeta(root) {\n    this.vueMeta = root.$meta();\n\n    if (this.isVueMeta23) {\n      // vue-meta needs to apply after mounted()\n      root.$nextTick(() => {\n        this.applyVueMeta23();\n      });\n      return;\n    }\n\n    const metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo';\n    const metaInfo = root.$options[metaKeyName] || {};\n\n    root.$options[metaKeyName] = () => {\n      metaInfo.style = metaInfo.style || [];\n      const vuetifyStylesheet = metaInfo.style.find(s => s.id === 'vuetify-theme-stylesheet');\n\n      if (!vuetifyStylesheet) {\n        metaInfo.style.push({\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce\n        });\n      } else {\n        vuetifyStylesheet.cssText = this.generatedStyles;\n      }\n\n      return metaInfo;\n    };\n  }\n\n  applyVueMeta23() {\n    const {\n      set\n    } = this.vueMeta.addApp('vuetify');\n    set({\n      style: [{\n        cssText: this.generatedStyles,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n        nonce: (this.options || {}).cspNonce\n      }]\n    });\n  }\n\n  initSSR(ssrContext) {\n    const options = this.options || {}; // SSR\n\n    const nonce = options.cspNonce ? ` nonce=\"${options.cspNonce}\"` : '';\n    ssrContext.head = ssrContext.head || '';\n    ssrContext.head += `<style type=\"text/css\" id=\"vuetify-theme-stylesheet\"${nonce}>${this.generatedStyles}</style>`;\n  }\n\n  initTheme() {\n    // Only watch for reactivity on client side\n    if (typeof document === 'undefined') return; // If we get here somehow, ensure\n    // existing instance is removed\n\n    if (this.vueInstance) this.vueInstance.$destroy(); // Use Vue instance to track reactivity\n    // TODO: Update to use RFC if merged\n    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n\n    this.vueInstance = new Vue({\n      data: {\n        themes: this.themes\n      },\n      watch: {\n        themes: {\n          immediate: true,\n          deep: true,\n          handler: () => this.applyTheme()\n        }\n      }\n    });\n  }\n\n  get currentTheme() {\n    const target = this.dark ? 'dark' : 'light';\n    return this.themes[target];\n  }\n\n  get generatedStyles() {\n    const theme = this.parsedTheme;\n    /* istanbul ignore next */\n\n    const options = this.options || {};\n    let css;\n\n    if (options.themeCache != null) {\n      css = options.themeCache.get(theme);\n      /* istanbul ignore if */\n\n      if (css != null) return css;\n    }\n\n    css = ThemeUtils.genStyles(theme, options.customProperties);\n\n    if (options.minifyTheme != null) {\n      css = options.minifyTheme(css);\n    }\n\n    if (options.themeCache != null) {\n      options.themeCache.set(theme, css);\n    }\n\n    return css;\n  }\n\n  get parsedTheme() {\n    /* istanbul ignore next */\n    const theme = this.currentTheme || {};\n    return ThemeUtils.parse(theme);\n  } // Is using v2.3 of vue-meta\n  // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n\n\n  get isVueMeta23() {\n    return typeof this.vueMeta.addApp === 'function';\n  }\n\n}\nTheme.property = 'theme';",{"version":3,"sources":["../../../src/services/theme/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport * as ThemeUtils from './utils'\n\n// Types\nimport Vue from 'vue'\nimport {\n  VuetifyParsedTheme,\n  VuetifyThemes,\n  VuetifyThemeVariant,\n  Theme as ITheme,\n} from 'vuetify/types/services/theme'\n\nexport class Theme extends Service {\n  static property = 'theme'\n\n  public disabled = false\n\n  public options!: ITheme['options']\n\n  public styleEl?: HTMLStyleElement\n\n  public themes: VuetifyThemes = {\n    light: {\n      primary: '#1976D2',   // blue.darken2\n      secondary: '#424242', // grey.darken3\n      accent: '#82B1FF',    // blue.accent1\n      error: '#FF5252',     // red.accent2\n      info: '#2196F3',      // blue.base\n      success: '#4CAF50',   // green.base\n      warning: '#FB8C00',    // amber.base\n    },\n    dark: {\n      primary: '#2196F3',   // blue.base\n      secondary: '#424242', // grey.darken3\n      accent: '#FF4081',    // pink.accent-2\n      error: '#FF5252',     // red.accent2\n      info: '#2196F3',      // blue.base\n      success: '#4CAF50',   // green.base\n      warning: '#FB8C00',    // amber.base\n    },\n  }\n\n  public defaults: VuetifyThemes = this.themes\n\n  private isDark = null as boolean | null\n\n  private vueInstance = null as Vue | null\n\n  private vueMeta = null as any | null\n\n  constructor (options: Partial<ITheme> = {}) {\n    super()\n    if (options.disable) {\n      this.disabled = true\n\n      return\n    }\n\n    this.options = options.options!\n\n    this.dark = Boolean(options.dark)\n    const themes = options.themes || {} as never\n\n    this.themes = {\n      dark: this.fillVariant(themes.dark, true),\n      light: this.fillVariant(themes.light, false),\n    }\n  }\n\n  // When setting css, check for element\n  // and apply new values\n  set css (val: string) {\n    if (this.vueMeta) {\n      if (this.isVueMeta23) {\n        this.applyVueMeta23()\n      }\n      return\n    }\n    this.checkOrCreateStyleElement() && (this.styleEl!.innerHTML = val)\n  }\n\n  set dark (val: boolean) {\n    const oldDark = this.isDark\n\n    this.isDark = val\n    // Only apply theme after dark\n    // has already been set before\n    oldDark != null && this.applyTheme()\n  }\n\n  get dark () {\n    return Boolean(this.isDark)\n  }\n\n  // Apply current theme default\n  // only called on client side\n  public applyTheme (): void {\n    if (this.disabled) return this.clearCss()\n\n    this.css = this.generatedStyles\n  }\n\n  public clearCss (): void {\n    this.css = ''\n  }\n\n  // Initialize theme for SSR and SPA\n  // Attach to ssrContext head or\n  // apply new theme to document\n  public init (root: Vue, ssrContext?: any): void {\n    if (this.disabled) return\n\n    /* istanbul ignore else */\n    if ((root as any).$meta) {\n      this.initVueMeta(root)\n    } else if (ssrContext) {\n      this.initSSR(ssrContext)\n    }\n\n    this.initTheme()\n  }\n\n  // Allows for you to set target theme\n  public setTheme (theme: 'light' | 'dark', value: object) {\n    this.themes[theme] = Object.assign(this.themes[theme], value)\n    this.applyTheme()\n  }\n\n  // Reset theme defaults\n  public resetThemes () {\n    this.themes.light = Object.assign({}, this.defaults.light)\n    this.themes.dark = Object.assign({}, this.defaults.dark)\n    this.applyTheme()\n  }\n\n  // Check for existence of style element\n  private checkOrCreateStyleElement (): boolean {\n    this.styleEl = document.getElementById('vuetify-theme-stylesheet') as HTMLStyleElement\n\n    /* istanbul ignore next */\n    if (this.styleEl) return true\n\n    this.genStyleElement() // If doesn't have it, create it\n\n    return Boolean(this.styleEl)\n  }\n\n  private fillVariant (\n    theme: Partial<VuetifyThemeVariant> = {},\n    dark: boolean\n  ): VuetifyThemeVariant {\n    const defaultTheme = this.themes[dark ? 'dark' : 'light']\n\n    return Object.assign({},\n      defaultTheme,\n      theme\n    )\n  }\n\n  // Generate the style element\n  // if applicable\n  private genStyleElement (): void {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return\n\n    /* istanbul ignore next */\n    const options = this.options || {}\n\n    this.styleEl = document.createElement('style')\n    this.styleEl.type = 'text/css'\n    this.styleEl.id = 'vuetify-theme-stylesheet'\n\n    if (options.cspNonce) {\n      this.styleEl.setAttribute('nonce', options.cspNonce)\n    }\n\n    document.head.appendChild(this.styleEl)\n  }\n\n  private initVueMeta (root: any) {\n    this.vueMeta = root.$meta()\n    if (this.isVueMeta23) {\n      // vue-meta needs to apply after mounted()\n      root.$nextTick(() => {\n        this.applyVueMeta23()\n      })\n      return\n    }\n\n    const metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo'\n    const metaInfo = root.$options[metaKeyName] || {}\n\n    root.$options[metaKeyName] = () => {\n      metaInfo.style = metaInfo.style || []\n\n      const vuetifyStylesheet = metaInfo.style.find((s: any) => s.id === 'vuetify-theme-stylesheet')\n\n      if (!vuetifyStylesheet) {\n        metaInfo.style.push({\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce,\n        })\n      } else {\n        vuetifyStylesheet.cssText = this.generatedStyles\n      }\n\n      return metaInfo\n    }\n  }\n\n  private applyVueMeta23 () {\n    const { set } = this.vueMeta.addApp('vuetify')\n\n    set({\n      style: [{\n        cssText: this.generatedStyles,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n        nonce: (this.options || {}).cspNonce,\n      }],\n    })\n  }\n\n  private initSSR (ssrContext?: any) {\n    const options = this.options || {}\n    // SSR\n    const nonce = options.cspNonce ? ` nonce=\"${options.cspNonce}\"` : ''\n    ssrContext.head = ssrContext.head || ''\n    ssrContext.head += `<style type=\"text/css\" id=\"vuetify-theme-stylesheet\"${nonce}>${this.generatedStyles}</style>`\n  }\n\n  private initTheme () {\n    // Only watch for reactivity on client side\n    if (typeof document === 'undefined') return\n\n    // If we get here somehow, ensure\n    // existing instance is removed\n    if (this.vueInstance) this.vueInstance.$destroy()\n\n    // Use Vue instance to track reactivity\n    // TODO: Update to use RFC if merged\n    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n    this.vueInstance = new Vue({\n      data: { themes: this.themes },\n\n      watch: {\n        themes: {\n          immediate: true,\n          deep: true,\n          handler: () => this.applyTheme(),\n        },\n      },\n    })\n  }\n\n  get currentTheme () {\n    const target = this.dark ? 'dark' : 'light'\n\n    return this.themes[target]\n  }\n\n  get generatedStyles (): string {\n    const theme = this.parsedTheme\n    /* istanbul ignore next */\n    const options = this.options || {}\n    let css\n\n    if (options.themeCache != null) {\n      css = options.themeCache.get(theme)\n      /* istanbul ignore if */\n      if (css != null) return css\n    }\n\n    css = ThemeUtils.genStyles(theme, options.customProperties)\n\n    if (options.minifyTheme != null) {\n      css = options.minifyTheme(css)\n    }\n\n    if (options.themeCache != null) {\n      options.themeCache.set(theme, css)\n    }\n\n    return css\n  }\n\n  get parsedTheme (): VuetifyParsedTheme {\n    /* istanbul ignore next */\n    const theme = this.currentTheme || {}\n    return ThemeUtils.parse(theme)\n  }\n\n  // Is using v2.3 of vue-meta\n  // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n  private get isVueMeta23 (): boolean {\n    return typeof this.vueMeta.addApp === 'function'\n  }\n}\n"],"sourceRoot":""}]}