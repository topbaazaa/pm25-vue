{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\util\\colorUtils.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\util\\colorUtils.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { consoleWarn } from './console';\nimport { chunk, padEnd } from './helpers';\nimport { toXYZ } from './color/transformSRGB';\nexport function colorToInt(color) {\n  let rgb;\n\n  if (typeof color === 'number') {\n    rgb = color;\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color;\n\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('');\n    }\n\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`);\n    }\n\n    rgb = parseInt(c, 16);\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`);\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`);\n    rgb = 0;\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`);\n    rgb = 0xffffff;\n  }\n\n  return rgb;\n}\nexport function intToHex(color) {\n  let hexColor = color.toString(16);\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;\n  return '#' + hexColor;\n}\nexport function colorToHex(color) {\n  return intToHex(colorToInt(color));\n}\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\n\nexport function HSVAtoRGBA(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n\n  const f = n => {\n    const k = (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255));\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n    a\n  };\n}\n/**\n * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]\n */\n\nexport function RGBAtoHSVA(rgba) {\n  if (!rgba) return {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  const r = rgba.r / 255;\n  const g = rgba.g / 255;\n  const b = rgba.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + (g - b) / (max - min));\n    } else if (max === g) {\n      h = 60 * (2 + (b - r) / (max - min));\n    } else if (max === b) {\n      h = 60 * (4 + (r - g) / (max - min));\n    }\n  }\n\n  if (h < 0) h = h + 360;\n  const s = max === 0 ? 0 : (max - min) / max;\n  const hsv = [h, s, max];\n  return {\n    h: hsv[0],\n    s: hsv[1],\n    v: hsv[2],\n    a: rgba.a\n  };\n}\nexport function HSVAtoHSLA(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n  const l = v - v * s / 2;\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h,\n    s: sprime,\n    l,\n    a\n  };\n}\nexport function HSLAtoHSVA(hsl) {\n  const {\n    h,\n    s,\n    l,\n    a\n  } = hsl;\n  const v = l + s * Math.min(l, 1 - l);\n  const sprime = v === 0 ? 0 : 2 - 2 * l / v;\n  return {\n    h,\n    s: sprime,\n    v,\n    a\n  };\n}\nexport function RGBAtoCSS(rgba) {\n  return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;\n}\nexport function RGBtoCSS(rgba) {\n  return RGBAtoCSS({ ...rgba,\n    a: 1\n  });\n}\nexport function RGBAtoHex(rgba) {\n  const toHex = v => {\n    const h = Math.round(v).toString(16);\n    return ('00'.substr(0, 2 - h.length) + h).toUpperCase();\n  };\n\n  return `#${[toHex(rgba.r), toHex(rgba.g), toHex(rgba.b), toHex(Math.round(rgba.a * 255))].join('')}`;\n}\nexport function HexToRGBA(hex) {\n  const rgba = chunk(hex.slice(1), 2).map(c => parseInt(c, 16));\n  return {\n    r: rgba[0],\n    g: rgba[1],\n    b: rgba[2],\n    a: Math.round(rgba[3] / 255 * 100) / 100\n  };\n}\nexport function HexToHSVA(hex) {\n  const rgb = HexToRGBA(hex);\n  return RGBAtoHSVA(rgb);\n}\nexport function HSVAtoHex(hsva) {\n  return RGBAtoHex(HSVAtoRGBA(hsva));\n}\nexport function parseHex(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1);\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F');\n\n  if (hex.length === 3) {\n    hex = hex.split('').map(x => x + x).join('');\n  }\n\n  if (hex.length === 6) {\n    hex = padEnd(hex, 8, 'F');\n  } else {\n    hex = padEnd(padEnd(hex, 6), 8, 'F');\n  }\n\n  return `#${hex}`.toUpperCase().substr(0, 9);\n}\nexport function RGBtoInt(rgba) {\n  return (rgba.r << 16) + (rgba.g << 8) + rgba.b;\n}\n/**\n * Returns the contrast ratio (1-21) between two colors.\n *\n * @param c1 First color\n * @param c2 Second color\n */\n\nexport function contrastRatio(c1, c2) {\n  const [, y1] = toXYZ(RGBtoInt(c1));\n  const [, y2] = toXYZ(RGBtoInt(c2));\n  return (Math.max(y1, y2) + 0.05) / (Math.min(y1, y2) + 0.05);\n}",{"version":3,"sources":["../../src/util/colorUtils.ts"],"names":[],"mappings":"AAAA,SAAA,WAAA,QAAA,WAAA;AACA,SAAA,KAAA,EAAA,MAAA,QAAA,WAAA;AACA,SAAA,KAAA,QAAA,uBAAA;AAeA,OAAM,SAAA,UAAA,CAAA,KAAA,EAAkC;AACtC,MAAA,GAAA;;AAEA,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,IAAA,GAAG,GAAH,KAAA;AADF,GAAA,MAEO,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AACpC,QAAI,CAAC,GAAG,KAAK,CAAL,CAAK,CAAL,KAAA,GAAA,GAAmB,KAAK,CAAL,SAAA,CAAnB,CAAmB,CAAnB,GAAR,KAAA;;AACA,QAAI,CAAC,CAAD,MAAA,KAAJ,CAAA,EAAoB;AAClB,MAAA,CAAC,GAAG,CAAC,CAAD,KAAA,CAAA,EAAA,EAAA,GAAA,CAAgB,IAAI,IAAI,IAAI,GAA5B,IAAA,EAAA,IAAA,CAAJ,EAAI,CAAJ;AACD;;AACD,QAAI,CAAC,CAAD,MAAA,KAAJ,CAAA,EAAoB;AAClB,MAAA,WAAW,CAAC,IAAI,KAAhB,4BAAW,CAAX;AACD;;AACD,IAAA,GAAG,GAAG,QAAQ,CAAA,CAAA,EAAd,EAAc,CAAd;AARK,GAAA,MASA;AACL,UAAM,IAAA,SAAA,CAAc,mDAAmD,KAAK,IAAL,IAAA,GAAA,KAAA,GAAwB,KAAK,CAAL,WAAA,CAAkB,IAAjH,UAAM,CAAN;AACD;;AAED,MAAI,GAAG,GAAP,CAAA,EAAa;AACX,IAAA,WAAW,CAAC,+BAA+B,KAA3C,GAAW,CAAX;AACA,IAAA,GAAG,GAAH,CAAA;AAFF,GAAA,MAGO,IAAI,GAAG,GAAH,QAAA,IAAkB,KAAK,CAA3B,GAA2B,CAA3B,EAAkC;AACvC,IAAA,WAAW,CAAC,IAAI,KAAhB,4BAAW,CAAX;AACA,IAAA,GAAG,GAAH,QAAA;AACD;;AAED,SAAA,GAAA;AACD;AAED,OAAM,SAAA,QAAA,CAAA,KAAA,EAAmC;AACvC,MAAI,QAAQ,GAAW,KAAK,CAAL,QAAA,CAAvB,EAAuB,CAAvB;AAEA,MAAI,QAAQ,CAAR,MAAA,GAAJ,CAAA,EAAyB,QAAQ,GAAG,IAAA,MAAA,CAAW,IAAI,QAAQ,CAAvB,MAAA,IAAX,QAAA;AAEzB,SAAO,MAAP,QAAA;AACD;AAED,OAAM,SAAA,UAAA,CAAA,KAAA,EAAkC;AACtC,SAAO,QAAQ,CAAC,UAAU,CAA1B,KAA0B,CAAX,CAAf;AACD;AAED;;;;;;AAKA,OAAM,SAAA,UAAA,CAAA,IAAA,EAAgC;AACpC,QAAM;AAAA,IAAA,CAAA;AAAA,IAAA,CAAA;AAAA,IAAA,CAAA;AAAW,IAAA;AAAX,MAAN,IAAA;;AACA,QAAM,CAAC,GAAI,CAAD,IAAc;AACtB,UAAM,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,GAAP,EAAA,IAAV,CAAA;AACA,WAAO,CAAC,GAAG,CAAC,GAAD,CAAA,GAAQ,IAAI,CAAJ,GAAA,CAAS,IAAI,CAAJ,GAAA,CAAA,CAAA,EAAY,IAAZ,CAAA,EAAT,CAAS,CAAT,EAAnB,CAAmB,CAAnB;AAFF,GAAA;;AAKA,QAAM,GAAG,GAAG,CAAC,CAAC,CAAF,CAAE,CAAF,EAAO,CAAC,CAAR,CAAQ,CAAR,EAAa,CAAC,CAAd,CAAc,CAAd,EAAA,GAAA,CAAuB,CAAC,IAAI,IAAI,CAAJ,KAAA,CAAW,CAAC,GAApD,GAAwC,CAA5B,CAAZ;AAEA,SAAO;AAAE,IAAA,CAAC,EAAE,GAAG,CAAR,CAAQ,CAAR;AAAa,IAAA,CAAC,EAAE,GAAG,CAAnB,CAAmB,CAAnB;AAAwB,IAAA,CAAC,EAAE,GAAG,CAA9B,CAA8B,CAA9B;AAAmC,IAAA;AAAnC,GAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAA,UAAA,CAAA,IAAA,EAAgC;AACpC,MAAI,CAAJ,IAAA,EAAW,OAAO;AAAE,IAAA,CAAC,EAAH,CAAA;AAAQ,IAAA,CAAC,EAAT,CAAA;AAAc,IAAA,CAAC,EAAf,CAAA;AAAoB,IAAA,CAAC,EAAE;AAAvB,GAAP;AAEX,QAAM,CAAC,GAAG,IAAI,CAAJ,CAAA,GAAV,GAAA;AACA,QAAM,CAAC,GAAG,IAAI,CAAJ,CAAA,GAAV,GAAA;AACA,QAAM,CAAC,GAAG,IAAI,CAAJ,CAAA,GAAV,GAAA;AACA,QAAM,GAAG,GAAG,IAAI,CAAJ,GAAA,CAAA,CAAA,EAAA,CAAA,EAAZ,CAAY,CAAZ;AACA,QAAM,GAAG,GAAG,IAAI,CAAJ,GAAA,CAAA,CAAA,EAAA,CAAA,EAAZ,CAAY,CAAZ;AAEA,MAAI,CAAC,GAAL,CAAA;;AAEA,MAAI,GAAG,KAAP,GAAA,EAAiB;AACf,QAAI,GAAG,KAAP,CAAA,EAAe;AACb,MAAA,CAAC,GAAG,MAAM,IAAK,CAAC,CAAC,GAAF,CAAA,KAAW,GAAG,GAA7B,GAAe,CAAX,CAAJ;AADF,KAAA,MAEO,IAAI,GAAG,KAAP,CAAA,EAAe;AACpB,MAAA,CAAC,GAAG,MAAM,IAAK,CAAC,CAAC,GAAF,CAAA,KAAW,GAAG,GAA7B,GAAe,CAAX,CAAJ;AADK,KAAA,MAEA,IAAI,GAAG,KAAP,CAAA,EAAe;AACpB,MAAA,CAAC,GAAG,MAAM,IAAK,CAAC,CAAC,GAAF,CAAA,KAAW,GAAG,GAA7B,GAAe,CAAX,CAAJ;AACD;AACF;;AAED,MAAI,CAAC,GAAL,CAAA,EAAW,CAAC,GAAG,CAAC,GAAL,GAAA;AAEX,QAAM,CAAC,GAAG,GAAG,KAAH,CAAA,GAAA,CAAA,GAAgB,CAAC,GAAG,GAAJ,GAAA,IAA1B,GAAA;AACA,QAAM,GAAG,GAAG,CAAA,CAAA,EAAA,CAAA,EAAZ,GAAY,CAAZ;AAEA,SAAO;AAAE,IAAA,CAAC,EAAE,GAAG,CAAR,CAAQ,CAAR;AAAa,IAAA,CAAC,EAAE,GAAG,CAAnB,CAAmB,CAAnB;AAAwB,IAAA,CAAC,EAAE,GAAG,CAA9B,CAA8B,CAA9B;AAAmC,IAAA,CAAC,EAAE,IAAI,CAAC;AAA3C,GAAP;AACD;AAED,OAAM,SAAA,UAAA,CAAA,IAAA,EAAgC;AACpC,QAAM;AAAA,IAAA,CAAA;AAAA,IAAA,CAAA;AAAA,IAAA,CAAA;AAAW,IAAA;AAAX,MAAN,IAAA;AAEA,QAAM,CAAC,GAAG,CAAC,GAAI,CAAC,GAAD,CAAA,GAAf,CAAA;AAEA,QAAM,MAAM,GAAG,CAAC,KAAD,CAAA,IAAW,CAAC,KAAZ,CAAA,GAAA,CAAA,GAAyB,CAAC,CAAC,GAAF,CAAA,IAAU,IAAI,CAAJ,GAAA,CAAA,CAAA,EAAY,IAA9D,CAAkD,CAAlD;AAEA,SAAO;AAAA,IAAA,CAAA;AAAK,IAAA,CAAC,EAAN,MAAA;AAAA,IAAA,CAAA;AAAmB,IAAA;AAAnB,GAAP;AACD;AAED,OAAM,SAAA,UAAA,CAAA,GAAA,EAA+B;AACnC,QAAM;AAAA,IAAA,CAAA;AAAA,IAAA,CAAA;AAAA,IAAA,CAAA;AAAW,IAAA;AAAX,MAAN,GAAA;AAEA,QAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAJ,GAAA,CAAA,CAAA,EAAY,IAA9B,CAAkB,CAAlB;AAEA,QAAM,MAAM,GAAG,CAAC,KAAD,CAAA,GAAA,CAAA,GAAc,IAAK,IAAA,CAAA,GAAlC,CAAA;AAEA,SAAO;AAAA,IAAA,CAAA;AAAK,IAAA,CAAC,EAAN,MAAA;AAAA,IAAA,CAAA;AAAmB,IAAA;AAAnB,GAAP;AACD;AAED,OAAM,SAAA,SAAA,CAAA,IAAA,EAA+B;AACnC,SAAO,QAAQ,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAArD,GAAA;AACD;AAED,OAAM,SAAA,QAAA,CAAA,IAAA,EAA8B;AAClC,SAAO,SAAS,CAAC,EAAE,GAAF,IAAA;AAAW,IAAA,CAAC,EAAE;AAAd,GAAD,CAAhB;AACD;AAED,OAAM,SAAA,SAAA,CAAA,IAAA,EAA+B;AACnC,QAAM,KAAK,GAAI,CAAD,IAAc;AAC1B,UAAM,CAAC,GAAG,IAAI,CAAJ,KAAA,CAAA,CAAA,EAAA,QAAA,CAAV,EAAU,CAAV;AACA,WAAO,CAAC,KAAA,MAAA,CAAA,CAAA,EAAe,IAAI,CAAC,CAApB,MAAA,IAAD,CAAA,EAAP,WAAO,EAAP;AAFF,GAAA;;AAKA,SAAO,IAAI,CACT,KAAK,CAAC,IAAI,CADD,CACJ,CADI,EAET,KAAK,CAAC,IAAI,CAFD,CAEJ,CAFI,EAGT,KAAK,CAAC,IAAI,CAHD,CAGJ,CAHI,EAIT,KAAK,CAAC,IAAI,CAAJ,KAAA,CAAW,IAAI,CAAJ,CAAA,GAJR,GAIH,CAAD,CAJI,EAAA,IAAA,CAAA,EAAA,CAAX,EAAA;AAMD;AAED,OAAM,SAAA,SAAA,CAAA,GAAA,EAA6B;AACjC,QAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAH,KAAA,CAAD,CAAC,CAAD,EAAL,CAAK,CAAL,CAAA,GAAA,CAA4B,CAAD,IAAe,QAAQ,CAAA,CAAA,EAA/D,EAA+D,CAAlD,CAAb;AAEA,SAAO;AACL,IAAA,CAAC,EAAE,IAAI,CADF,CACE,CADF;AAEL,IAAA,CAAC,EAAE,IAAI,CAFF,CAEE,CAFF;AAGL,IAAA,CAAC,EAAE,IAAI,CAHF,CAGE,CAHF;AAIL,IAAA,CAAC,EAAE,IAAI,CAAJ,KAAA,CAAY,IAAI,CAAJ,CAAI,CAAJ,GAAD,GAAC,GAAZ,GAAA,IAAoC;AAJlC,GAAP;AAMD;AAED,OAAM,SAAA,SAAA,CAAA,GAAA,EAA6B;AACjC,QAAM,GAAG,GAAG,SAAS,CAArB,GAAqB,CAArB;AACA,SAAO,UAAU,CAAjB,GAAiB,CAAjB;AACD;AAED,OAAM,SAAA,SAAA,CAAA,IAAA,EAA+B;AACnC,SAAO,SAAS,CAAC,UAAU,CAA3B,IAA2B,CAAX,CAAhB;AACD;AAED,OAAM,SAAA,QAAA,CAAA,GAAA,EAA+B;AACnC,MAAI,GAAG,CAAH,UAAA,CAAJ,GAAI,CAAJ,EAAyB;AACvB,IAAA,GAAG,GAAG,GAAG,CAAH,KAAA,CAAN,CAAM,CAAN;AACD;;AAED,EAAA,GAAG,GAAG,GAAG,CAAH,OAAA,CAAA,eAAA,EAAN,GAAM,CAAN;;AAEA,MAAI,GAAG,CAAH,MAAA,KAAJ,CAAA,EAAsB;AACpB,IAAA,GAAG,GAAG,GAAG,CAAH,KAAA,CAAA,EAAA,EAAA,GAAA,CAAkB,CAAC,IAAI,CAAC,GAAxB,CAAA,EAAA,IAAA,CAAN,EAAM,CAAN;AACD;;AAED,MAAI,GAAG,CAAH,MAAA,KAAJ,CAAA,EAAsB;AACpB,IAAA,GAAG,GAAG,MAAM,CAAA,GAAA,EAAA,CAAA,EAAZ,GAAY,CAAZ;AADF,GAAA,MAEO;AACL,IAAA,GAAG,GAAG,MAAM,CAAC,MAAM,CAAA,GAAA,EAAP,CAAO,CAAP,EAAA,CAAA,EAAZ,GAAY,CAAZ;AACD;;AAED,SAAO,IAAI,GAAJ,EAAA,CAAA,WAAA,GAAA,MAAA,CAAA,CAAA,EAAP,CAAO,CAAP;AACD;AAED,OAAM,SAAA,QAAA,CAAA,IAAA,EAA8B;AAClC,SAAO,CAAC,IAAI,CAAJ,CAAA,IAAD,EAAA,KAAkB,IAAI,CAAJ,CAAA,IAAlB,CAAA,IAAiC,IAAI,CAA5C,CAAA;AACD;AAED;;;;;;;AAMA,OAAM,SAAA,aAAA,CAAA,EAAA,EAAA,EAAA,EAA2C;AAC/C,QAAM,GAAA,EAAA,IAAS,KAAK,CAAC,QAAQ,CAA7B,EAA6B,CAAT,CAApB;AACA,QAAM,GAAA,EAAA,IAAS,KAAK,CAAC,QAAQ,CAA7B,EAA6B,CAAT,CAApB;AAEA,SAAO,CAAC,IAAI,CAAJ,GAAA,CAAA,EAAA,EAAA,EAAA,IAAD,IAAA,KAA6B,IAAI,CAAJ,GAAA,CAAA,EAAA,EAAA,EAAA,IAApC,IAAO,CAAP;AACD","sourcesContent":["import { consoleWarn } from './console'\nimport { chunk, padEnd } from './helpers'\nimport { toXYZ } from './color/transformSRGB'\n\nexport type ColorInt = number\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\nexport type HSV = { h: number, s: number, v: number }\nexport type HSVA = HSV & { a: number }\nexport type RGB = { r: number, g: number, b: number }\nexport type RGBA = RGB & { a: number }\nexport type HSL = { h: number, s: number, l: number }\nexport type HSLA = HSL & { a: number }\nexport type Hex = string\nexport type Hexa = string\nexport type Color = string | number | {}\n\nexport function colorToInt (color: Color): ColorInt {\n  let rgb\n\n  if (typeof color === 'number') {\n    rgb = color\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('')\n    }\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`)\n    }\n    rgb = parseInt(c, 16)\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`)\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`)\n    rgb = 0\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`)\n    rgb = 0xffffff\n  }\n\n  return rgb\n}\n\nexport function intToHex (color: ColorInt): string {\n  let hexColor: string = color.toString(16)\n\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor\n\n  return '#' + hexColor\n}\n\nexport function colorToHex (color: Color): string {\n  return intToHex(colorToInt(color))\n}\n\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\nexport function HSVAtoRGBA (hsva: HSVA): RGBA {\n  const { h, s, v, a } = hsva\n  const f = (n: number) => {\n    const k = (n + (h / 60)) % 6\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)\n  }\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255))\n\n  return { r: rgb[0], g: rgb[1], b: rgb[2], a }\n}\n\n/**\n * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]\n */\nexport function RGBAtoHSVA (rgba: RGBA): HSVA {\n  if (!rgba) return { h: 0, s: 1, v: 1, a: 1 }\n\n  const r = rgba.r / 255\n  const g = rgba.g / 255\n  const b = rgba.b / 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n\n  let h = 0\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + ((g - b) / (max - min)))\n    } else if (max === g) {\n      h = 60 * (2 + ((b - r) / (max - min)))\n    } else if (max === b) {\n      h = 60 * (4 + ((r - g) / (max - min)))\n    }\n  }\n\n  if (h < 0) h = h + 360\n\n  const s = max === 0 ? 0 : (max - min) / max\n  const hsv = [h, s, max]\n\n  return { h: hsv[0], s: hsv[1], v: hsv[2], a: rgba.a }\n}\n\nexport function HSVAtoHSLA (hsva: HSVA): HSLA {\n  const { h, s, v, a } = hsva\n\n  const l = v - (v * s / 2)\n\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l)\n\n  return { h, s: sprime, l, a }\n}\n\nexport function HSLAtoHSVA (hsl: HSLA): HSVA {\n  const { h, s, l, a } = hsl\n\n  const v = l + s * Math.min(l, 1 - l)\n\n  const sprime = v === 0 ? 0 : 2 - (2 * l / v)\n\n  return { h, s: sprime, v, a }\n}\n\nexport function RGBAtoCSS (rgba: RGBA): string {\n  return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`\n}\n\nexport function RGBtoCSS (rgba: RGBA): string {\n  return RGBAtoCSS({ ...rgba, a: 1 })\n}\n\nexport function RGBAtoHex (rgba: RGBA): Hex {\n  const toHex = (v: number) => {\n    const h = Math.round(v).toString(16)\n    return ('00'.substr(0, 2 - h.length) + h).toUpperCase()\n  }\n\n  return `#${[\n    toHex(rgba.r),\n    toHex(rgba.g),\n    toHex(rgba.b),\n    toHex(Math.round(rgba.a * 255)),\n  ].join('')}`\n}\n\nexport function HexToRGBA (hex: Hex): RGBA {\n  const rgba = chunk(hex.slice(1), 2).map((c: string) => parseInt(c, 16))\n\n  return {\n    r: rgba[0],\n    g: rgba[1],\n    b: rgba[2],\n    a: Math.round((rgba[3] / 255) * 100) / 100,\n  }\n}\n\nexport function HexToHSVA (hex: Hex): HSVA {\n  const rgb = HexToRGBA(hex)\n  return RGBAtoHSVA(rgb)\n}\n\nexport function HSVAtoHex (hsva: HSVA): Hex {\n  return RGBAtoHex(HSVAtoRGBA(hsva))\n}\n\nexport function parseHex (hex: string): Hex {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1)\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F')\n\n  if (hex.length === 3) {\n    hex = hex.split('').map(x => x + x).join('')\n  }\n\n  if (hex.length === 6) {\n    hex = padEnd(hex, 8, 'F')\n  } else {\n    hex = padEnd(padEnd(hex, 6), 8, 'F')\n  }\n\n  return `#${hex}`.toUpperCase().substr(0, 9)\n}\n\nexport function RGBtoInt (rgba: RGBA): ColorInt {\n  return (rgba.r << 16) + (rgba.g << 8) + rgba.b\n}\n\n/**\n * Returns the contrast ratio (1-21) between two colors.\n *\n * @param c1 First color\n * @param c2 Second color\n */\nexport function contrastRatio (c1: RGBA, c2: RGBA): number {\n  const [, y1] = toXYZ(RGBtoInt(c1))\n  const [, y2] = toXYZ(RGBtoInt(c2))\n\n  return (Math.max(y1, y2) + 0.05) / (Math.min(y1, y2) + 0.05)\n}\n"],"sourceRoot":""}]}