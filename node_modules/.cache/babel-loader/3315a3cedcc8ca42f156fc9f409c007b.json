{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VCombobox\\VCombobox.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VCombobox\\VCombobox.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VAutocomplete/VAutocomplete.sass\"; // Extensions\n\nimport VSelect from '../VSelect/VSelect';\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'; // Utils\n\nimport { keyCodes } from '../../util/helpers';\n/* @vue/component */\n\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => []\n    },\n    returnObject: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: () => ({\n    editingIndex: -1\n  }),\n  computed: {\n    counterValue() {\n      return this.multiple ? this.selectedItems.length : (this.internalSearch || '').toString().length;\n    },\n\n    hasSlot() {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple;\n    },\n\n    isAnyValueAllowed() {\n      return true;\n    },\n\n    menuCanShow() {\n      if (!this.isFocused) return false;\n      return this.hasDisplayedItems || !!this.$slots['no-data'] && !this.hideNoData;\n    }\n\n  },\n  methods: {\n    onInternalSearchChanged(val) {\n      if (val && this.multiple && this.delimiters.length) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d));\n\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length);\n          this.updateTags();\n        }\n      }\n\n      this.updateMenuDimensions();\n    },\n\n    genInput() {\n      const input = VAutocomplete.options.methods.genInput.call(this);\n      delete input.data.attrs.name;\n      input.data.on.paste = this.onPaste;\n      return input;\n    },\n\n    genChipSelection(item, index) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index); // Allow user to update an existing value\n\n      if (this.multiple) {\n        chip.componentOptions.listeners = { ...chip.componentOptions.listeners,\n          dblclick: () => {\n            this.editingIndex = index;\n            this.internalSearch = this.getText(item);\n            this.selectedIndex = -1;\n          }\n        };\n      }\n\n      return chip;\n    },\n\n    onChipInput(item) {\n      VSelect.options.methods.onChipInput.call(this, item);\n      this.editingIndex = -1;\n    },\n\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown(e) {\n      e.preventDefault();\n      this.$nextTick(() => {\n        // If has menu index, let v-select-list handle\n        if (this.getMenuIndex() > -1) return;\n        this.updateSelf();\n      });\n    },\n\n    onFilteredItemsChanged(val, oldVal) {\n      if (!this.autoSelectFirst) return;\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal);\n    },\n\n    onKeyDown(e) {\n      const keyCode = e.keyCode;\n      VSelect.options.methods.onKeyDown.call(this, e); // If user is at selection index of 0\n      // create a new tag\n\n      if (this.multiple && keyCode === keyCodes.left && this.$refs.input.selectionStart === 0) {\n        this.updateSelf();\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e);\n      } // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n\n\n      this.changeSelectedIndex(keyCode);\n    },\n\n    onTabDown(e) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple && this.internalSearch && this.getMenuIndex() === -1) {\n        e.preventDefault();\n        e.stopPropagation();\n        return this.updateTags();\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e);\n    },\n\n    selectItem(item) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing();\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item);\n      }\n    },\n\n    setSelectedItems() {\n      if (this.internalValue == null || this.internalValue === '') {\n        this.selectedItems = [];\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue];\n      }\n    },\n\n    setValue(value) {\n      VSelect.options.methods.setValue.call(this, value != null ? value : this.internalSearch);\n    },\n\n    updateEditing() {\n      const value = this.internalValue.slice();\n      value[this.editingIndex] = this.internalSearch;\n      this.setValue(value);\n      this.editingIndex = -1;\n    },\n\n    updateCombobox() {\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips; // If search is not dirty and is\n      // using slot, do nothing\n\n      if (isUsingSlot && !this.searchIsDirty) return; // The internal search is not matching\n      // the internal value, update the input\n\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue(); // Reset search if using slot\n      // to avoid a double input\n\n      if (isUsingSlot) this.internalSearch = undefined;\n    },\n\n    updateSelf() {\n      this.multiple ? this.updateTags() : this.updateCombobox();\n    },\n\n    updateTags() {\n      const menuIndex = this.getMenuIndex(); // If the user is not searching\n      // and no menu item is selected\n      // do nothing\n\n      if (menuIndex < 0 && !this.searchIsDirty) return;\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing();\n      }\n\n      const index = this.selectedItems.indexOf(this.internalSearch); // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n\n      if (index > -1) {\n        const internalValue = this.internalValue.slice();\n        internalValue.splice(index, 1);\n        this.setValue(internalValue);\n      } // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n\n\n      if (menuIndex > -1) return this.internalSearch = null;\n      this.selectItem(this.internalSearch);\n      this.internalSearch = null;\n    },\n\n    onPaste(event) {\n      if (!this.multiple || this.searchIsDirty) return;\n      const pastedItemText = event.clipboardData.getData('text/vnd.vuetify.autocomplete.item+plain');\n\n      if (pastedItemText && this.findExistingIndex(pastedItemText) === -1) {\n        event.preventDefault();\n        VSelect.options.methods.selectItem.call(this, pastedItemText);\n      }\n    }\n\n  }\n});",{"version":3,"sources":["../../../src/components/VCombobox/VCombobox.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<any[]>,\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    counterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n\n      this.$nextTick(() => {\n        // If has menu index, let v-select-list handle\n        if (this.getMenuIndex() > -1) return\n        this.updateSelf()\n      })\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      VSelect.options.methods.onKeyDown.call(this, e)\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value != null ? value : this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      value[this.editingIndex] = this.internalSearch\n\n      this.setValue(value)\n\n      this.editingIndex = -1\n    },\n    updateCombobox () {\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n\n      // If search is not dirty and is\n      // using slot, do nothing\n      if (isUsingSlot && !this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot\n      // to avoid a double input\n      if (isUsingSlot) this.internalSearch = undefined\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // do nothing\n      if (menuIndex < 0 &&\n        !this.searchIsDirty\n      ) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.indexOf(this.internalSearch)\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(this.internalSearch)\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData!.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n  },\n})\n"],"sourceRoot":""}]}