{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VExpansionPanel\\VExpansionPanelHeader.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VExpansionPanel\\VExpansionPanelHeader.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Components\nimport { VFadeTransition } from '../transitions';\nimport VIcon from '../VIcon'; // Mixins\n\nimport { inject as RegistrableInject } from '../../mixins/registrable'; // Directives\n\nimport ripple from '../../directives/ripple'; // Utilities\n\nimport { getSlot } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(RegistrableInject('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel'));\nexport default baseMixins.extend().extend({\n  name: 'v-expansion-panel-header',\n  directives: {\n    ripple\n  },\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand'\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false\n    }\n  },\n  data: () => ({\n    hasMousedown: false\n  }),\n  computed: {\n    classes() {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown\n      };\n    },\n\n    isActive() {\n      return this.expansionPanel.isActive;\n    },\n\n    isDisabled() {\n      return this.expansionPanel.isDisabled;\n    },\n\n    isReadonly() {\n      return this.expansionPanel.isReadonly;\n    }\n\n  },\n\n  created() {\n    this.expansionPanel.registerHeader(this);\n  },\n\n  beforeDestroy() {\n    this.expansionPanel.unregisterHeader();\n  },\n\n  methods: {\n    onClick(e) {\n      this.$emit('click', e);\n    },\n\n    genIcon() {\n      const icon = getSlot(this, 'actions') || [this.$createElement(VIcon, this.expandIcon)];\n      return this.$createElement(VFadeTransition, [this.$createElement('div', {\n        staticClass: 'v-expansion-panel-header__icon',\n        class: {\n          'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate\n        },\n        directives: [{\n          name: 'show',\n          value: !this.isDisabled\n        }]\n      }, icon)]);\n    }\n\n  },\n\n  render(h) {\n    return h('button', {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button'\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple\n      }],\n      on: { ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => this.hasMousedown = true,\n        mouseup: () => this.hasMousedown = false\n      }\n    }, [getSlot(this, 'default', {\n      open: this.isActive\n    }, true), this.hideActions || this.genIcon()]);\n  }\n\n});",{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts"],"names":[],"mappings":"AAAA;AACA,SAAA,eAAA,QAAA,gBAAA;AAEA,OAAA,KAAA,MAAA,UAAA,C,CAEA;;AACA,SAAS,MAAM,IAAf,iBAAA,QAAA,0BAAA,C,CAEA;;AACA,OAAA,MAAA,MAAA,yBAAA,C,CAEA;;AACA,SAAA,OAAA,QAAA,oBAAA;AACA,OAAA,MAAA,MAAA,mBAAA;AAKA,MAAM,UAAU,GAAG,MAAM,CACvB,iBAAiB,CAAA,gBAAA,EAAA,0BAAA,EADnB,mBACmB,CADM,CAAzB;AASA,eAAe,UAAU,CAAV,MAAA,GAAA,MAAA,CAAoC;AACjD,EAAA,IAAI,EAD6C,0BAAA;AAGjD,EAAA,UAAU,EAAE;AAAE,IAAA;AAAF,GAHqC;AAKjD,EAAA,KAAK,EAAE;AACL,IAAA,iBAAiB,EADZ,OAAA;AAEL,IAAA,UAAU,EAAE;AACV,MAAA,IAAI,EADM,MAAA;AAEV,MAAA,OAAO,EAAE;AAFC,KAFP;AAML,IAAA,WAAW,EANN,OAAA;AAOL,IAAA,MAAM,EAAE;AACN,MAAA,IAAI,EAAE,CAAA,OAAA,EADA,MACA,CADA;AAEN,MAAA,OAAO,EAAE;AAFH;AAPH,GAL0C;AAkBjD,EAAA,IAAI,EAAE,OAAO;AACX,IAAA,YAAY,EAAE;AADH,GAAP,CAlB2C;AAsBjD,EAAA,QAAQ,EAAE;AACR,IAAA,OAAO,GAAA;AACL,aAAO;AACL,4CAAoC,KAD/B,QAAA;AAEL,+CAAuC,KAAK;AAFvC,OAAP;AAFM,KAAA;;AAOR,IAAA,QAAQ,GAAA;AACN,aAAO,KAAA,cAAA,CAAP,QAAA;AARM,KAAA;;AAUR,IAAA,UAAU,GAAA;AACR,aAAO,KAAA,cAAA,CAAP,UAAA;AAXM,KAAA;;AAaR,IAAA,UAAU,GAAA;AACR,aAAO,KAAA,cAAA,CAAP,UAAA;AACD;;AAfO,GAtBuC;;AAwCjD,EAAA,OAAO,GAAA;AACL,SAAA,cAAA,CAAA,cAAA,CAAA,IAAA;AAzC+C,GAAA;;AA4CjD,EAAA,aAAa,GAAA;AACX,SAAA,cAAA,CAAA,gBAAA;AA7C+C,GAAA;;AAgDjD,EAAA,OAAO,EAAE;AACP,IAAA,OAAO,CAAA,CAAA,EAAe;AACpB,WAAA,KAAA,CAAA,OAAA,EAAA,CAAA;AAFK,KAAA;;AAIP,IAAA,OAAO,GAAA;AACL,YAAM,IAAI,GAAG,OAAO,CAAA,IAAA,EAAP,SAAO,CAAP,IACX,CAAC,KAAA,cAAA,CAAA,KAAA,EAA2B,KAD9B,UACG,CAAD,CADF;AAGA,aAAO,KAAA,cAAA,CAAA,eAAA,EAAqC,CAC1C,KAAA,cAAA,CAAA,KAAA,EAA2B;AACzB,QAAA,WAAW,EADc,gCAAA;AAEzB,QAAA,KAAK,EAAE;AACL,4DAAkD,KAAK;AADlD,SAFkB;AAKzB,QAAA,UAAU,EAAE,CAAC;AACX,UAAA,IAAI,EADO,MAAA;AAEX,UAAA,KAAK,EAAE,CAAC,KAAK;AAFF,SAAD;AALa,OAA3B,EADF,IACE,CAD0C,CAArC,CAAP;AAYD;;AApBM,GAhDwC;;AAuEjD,EAAA,MAAM,CAAA,CAAA,EAAG;AACP,WAAO,CAAC,CAAA,QAAA,EAAW;AACjB,MAAA,WAAW,EADM,0BAAA;AAEjB,MAAA,KAAK,EAAE,KAFU,OAAA;AAGjB,MAAA,KAAK,EAAE;AACL,QAAA,QAAQ,EAAE,KAAA,UAAA,GAAkB,CAAlB,CAAA,GADL,IAAA;AAEL,QAAA,IAAI,EAAE;AAFD,OAHU;AAOjB,MAAA,UAAU,EAAE,CAAC;AACX,QAAA,IAAI,EADO,QAAA;AAEX,QAAA,KAAK,EAAE,KAAK;AAFD,OAAD,CAPK;AAWjB,MAAA,EAAE,EAAE,EACF,GAAG,KADD,UAAA;AAEF,QAAA,KAAK,EAAE,KAFL,OAAA;AAGF,QAAA,SAAS,EAAE,MAAO,KAAA,YAAA,GAHhB,IAAA;AAIF,QAAA,OAAO,EAAE,MAAO,KAAA,YAAA,GAAoB;AAJlC;AAXa,KAAX,EAiBL,CACD,OAAO,CAAA,IAAA,EAAA,SAAA,EAAkB;AAAE,MAAA,IAAI,EAAE,KAAK;AAAb,KAAlB,EADN,IACM,CADN,EAED,KAAA,WAAA,IAAoB,KAnBtB,OAmBsB,EAFnB,CAjBK,CAAR;AAqBD;;AA7FgD,CAApC,CAAf","sourcesContent":["// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }, [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n"],"sourceRoot":""}]}