{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VDatePicker\\util\\createNativeLocaleFormatter.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VDatePicker\\util\\createNativeLocaleFormatter.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import pad from './pad';\n\nfunction createNativeLocaleFormatter(locale, options, substrOptions = {\n  start: 0,\n  length: 0\n}) {\n  const makeIsoString = dateString => {\n    const [year, month, date] = dateString.trim().split(' ')[0].split('-');\n    return [pad(year, 4), pad(month || 1), pad(date || 1)].join('-');\n  };\n\n  try {\n    const intlFormatter = new Intl.DateTimeFormat(locale || undefined, options);\n    return dateString => intlFormatter.format(new Date(`${makeIsoString(dateString)}T00:00:00+00:00`));\n  } catch (e) {\n    return substrOptions.start || substrOptions.length ? dateString => makeIsoString(dateString).substr(substrOptions.start || 0, substrOptions.length) : undefined;\n  }\n}\n\nexport default createNativeLocaleFormatter;",{"version":3,"sources":["../../../../src/components/VDatePicker/util/createNativeLocaleFormatter.ts"],"names":[],"mappings":"AAAA,OAAA,GAAA,MAAA,OAAA;;AAoBA,SAAA,2BAAA,CAAA,MAAA,EAAA,OAAA,EAGE,aAAA,GAA+B;AAAE,EAAA,KAAK,EAAP,CAAA;AAAY,EAAA,MAAM,EAAE;AAApB,CAHjC,EAGwD;AAEtD,QAAM,aAAa,GAAI,UAAD,IAAuB;AAC3C,UAAM,CAAA,IAAA,EAAA,KAAA,EAAA,IAAA,IAAsB,UAAU,CAAV,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,EAAA,KAAA,CAA5B,GAA4B,CAA5B;AACA,WAAO,CAAC,GAAG,CAAA,IAAA,EAAJ,CAAI,CAAJ,EAAe,GAAG,CAAC,KAAK,IAAxB,CAAkB,CAAlB,EAAgC,GAAG,CAAC,IAAI,IAAxC,CAAmC,CAAnC,EAAA,IAAA,CAAP,GAAO,CAAP;AAFF,GAAA;;AAKA,MAAI;AACF,UAAM,aAAa,GAAG,IAAI,IAAI,CAAR,cAAA,CAAwB,MAAM,IAA9B,SAAA,EAAtB,OAAsB,CAAtB;AACA,WAAQ,UAAD,IAAwB,aAAa,CAAb,MAAA,CAAqB,IAAA,IAAA,CAAS,GAAG,aAAa,CAAA,UAAA,CAA7E,iBAAoD,CAArB,CAA/B;AAFF,GAAA,CAGE,OAAA,CAAA,EAAU;AACV,WAAQ,aAAa,CAAb,KAAA,IAAuB,aAAa,CAArC,MAAC,GACH,UAAD,IAAwB,aAAa,CAAb,UAAa,CAAb,CAAA,MAAA,CAAiC,aAAa,CAAb,KAAA,IAAjC,CAAA,EAA2D,aAAa,CAD7F,MACqB,CADpB,GAAR,SAAA;AAGD;AACF;;AAED,eAAA,2BAAA","sourcesContent":["import pad from './pad'\n\ninterface SubstrOptions {\n  start?: number\n  length: number\n}\n\nexport type DatePickerFormatter = (date: string) => string\n\nfunction createNativeLocaleFormatter (\n  local: string | undefined,\n  options: Intl.DateTimeFormatOptions\n): DatePickerFormatter | undefined\n\nfunction createNativeLocaleFormatter (\n  local: string | undefined,\n  options: Intl.DateTimeFormatOptions,\n  substrOptions: SubstrOptions\n): DatePickerFormatter\n\nfunction createNativeLocaleFormatter (\n  locale: string | undefined,\n  options: Intl.DateTimeFormatOptions,\n  substrOptions: SubstrOptions = { start: 0, length: 0 }\n): DatePickerFormatter | undefined {\n  const makeIsoString = (dateString: string) => {\n    const [year, month, date] = dateString.trim().split(' ')[0].split('-')\n    return [pad(year, 4), pad(month || 1), pad(date || 1)].join('-')\n  }\n\n  try {\n    const intlFormatter = new Intl.DateTimeFormat(locale || undefined, options)\n    return (dateString: string) => intlFormatter.format(new Date(`${makeIsoString(dateString)}T00:00:00+00:00`))\n  } catch (e) {\n    return (substrOptions.start || substrOptions.length)\n      ? (dateString: string) => makeIsoString(dateString).substr(substrOptions.start || 0, substrOptions.length)\n      : undefined\n  }\n}\n\nexport default createNativeLocaleFormatter\n"],"sourceRoot":""}]}