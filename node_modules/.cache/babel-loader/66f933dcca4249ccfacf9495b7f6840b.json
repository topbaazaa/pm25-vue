{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VData\\VData.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VData\\VData.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Helpers\nimport { wrapInArray, sortItems, deepEqual, groupByProperty, searchItems } from '../../util/helpers';\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'v-data',\n  inheritAttrs: false,\n  props: {\n    items: {\n      type: Array,\n      default: () => []\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    sortBy: {\n      type: [String, Array],\n      default: () => []\n    },\n    sortDesc: {\n      type: [Boolean, Array],\n      default: () => []\n    },\n    customSort: {\n      type: Function,\n      default: sortItems\n    },\n    mustSort: Boolean,\n    multiSort: Boolean,\n    page: {\n      type: Number,\n      default: 1\n    },\n    itemsPerPage: {\n      type: Number,\n      default: 10\n    },\n    groupBy: {\n      type: [String, Array],\n      default: () => []\n    },\n    groupDesc: {\n      type: [Boolean, Array],\n      default: () => []\n    },\n    locale: {\n      type: String,\n      default: 'en-US'\n    },\n    disableSort: Boolean,\n    disablePagination: Boolean,\n    disableFiltering: Boolean,\n    search: String,\n    customFilter: {\n      type: Function,\n      default: searchItems\n    },\n    serverItemsLength: {\n      type: Number,\n      default: -1\n    }\n  },\n\n  data() {\n    let internalOptions = {\n      page: this.page,\n      itemsPerPage: this.itemsPerPage,\n      sortBy: wrapInArray(this.sortBy),\n      sortDesc: wrapInArray(this.sortDesc),\n      groupBy: wrapInArray(this.groupBy),\n      groupDesc: wrapInArray(this.groupDesc),\n      mustSort: this.mustSort,\n      multiSort: this.multiSort\n    };\n\n    if (this.options) {\n      internalOptions = Object.assign(internalOptions, this.options);\n    }\n\n    return {\n      internalOptions\n    };\n  },\n\n  computed: {\n    itemsLength() {\n      return this.serverItemsLength >= 0 ? this.serverItemsLength : this.filteredItems.length;\n    },\n\n    pageCount() {\n      return this.internalOptions.itemsPerPage === -1 ? 1 : Math.ceil(this.itemsLength / this.internalOptions.itemsPerPage); // TODO: can't use items.length here\n    },\n\n    pageStart() {\n      if (this.internalOptions.itemsPerPage === -1 || !this.items.length) return 0;\n      return (this.internalOptions.page - 1) * this.internalOptions.itemsPerPage;\n    },\n\n    pageStop() {\n      if (this.internalOptions.itemsPerPage === -1) return this.itemsLength;\n      if (!this.items.length) return 0;\n      return Math.min(this.itemsLength, this.internalOptions.page * this.internalOptions.itemsPerPage);\n    },\n\n    isGrouped() {\n      return !!this.internalOptions.groupBy.length;\n    },\n\n    pagination() {\n      return {\n        page: this.internalOptions.page,\n        itemsPerPage: this.internalOptions.itemsPerPage,\n        pageStart: this.pageStart,\n        pageStop: this.pageStop,\n        pageCount: this.pageCount,\n        itemsLength: this.itemsLength\n      };\n    },\n\n    filteredItems() {\n      let items = this.items.slice();\n\n      if (!this.disableFiltering && this.serverItemsLength <= 0) {\n        items = this.customFilter(items, this.search);\n      }\n\n      return items;\n    },\n\n    computedItems() {\n      let items = this.filteredItems.slice();\n\n      if (!this.disableSort && this.serverItemsLength <= 0) {\n        items = this.sortItems(items);\n      }\n\n      if (!this.disablePagination && this.serverItemsLength <= 0) {\n        items = this.paginateItems(items);\n      }\n\n      return items;\n    },\n\n    groupedItems() {\n      return this.isGrouped ? groupByProperty(this.computedItems, this.internalOptions.groupBy[0]) : null;\n    },\n\n    scopedProps() {\n      const props = {\n        sort: this.sort,\n        sortArray: this.sortArray,\n        group: this.group,\n        items: this.computedItems,\n        options: this.internalOptions,\n        updateOptions: this.updateOptions,\n        pagination: this.pagination,\n        groupedItems: this.groupedItems,\n        originalItemsLength: this.items.length\n      };\n      return props;\n    },\n\n    computedOptions() {\n      return { ...this.options\n      };\n    }\n\n  },\n  watch: {\n    computedOptions: {\n      handler(options, old) {\n        if (deepEqual(options, old)) return;\n        this.updateOptions(options);\n      },\n\n      deep: true,\n      immediate: true\n    },\n    internalOptions: {\n      handler(options, old) {\n        if (deepEqual(options, old)) return;\n        this.$emit('update:options', options);\n        this.$emit('pagination', this.pagination);\n      },\n\n      deep: true,\n      immediate: true\n    },\n\n    page(page) {\n      this.updateOptions({\n        page\n      });\n    },\n\n    'internalOptions.page'(page) {\n      this.$emit('update:page', page);\n    },\n\n    itemsPerPage(itemsPerPage) {\n      this.updateOptions({\n        itemsPerPage\n      });\n    },\n\n    'internalOptions.itemsPerPage'(itemsPerPage) {\n      this.$emit('update:items-per-page', itemsPerPage);\n    },\n\n    sortBy(sortBy) {\n      this.updateOptions({\n        sortBy: wrapInArray(sortBy)\n      });\n    },\n\n    'internalOptions.sortBy'(sortBy, old) {\n      !deepEqual(sortBy, old) && this.$emit('update:sort-by', Array.isArray(this.sortBy) ? sortBy : sortBy[0]);\n    },\n\n    sortDesc(sortDesc) {\n      this.updateOptions({\n        sortDesc: wrapInArray(sortDesc)\n      });\n    },\n\n    'internalOptions.sortDesc'(sortDesc, old) {\n      !deepEqual(sortDesc, old) && this.$emit('update:sort-desc', Array.isArray(this.sortDesc) ? sortDesc : sortDesc[0]);\n    },\n\n    groupBy(groupBy) {\n      this.updateOptions({\n        groupBy: wrapInArray(groupBy)\n      });\n    },\n\n    'internalOptions.groupBy'(groupBy, old) {\n      !deepEqual(groupBy, old) && this.$emit('update:group-by', Array.isArray(this.groupBy) ? groupBy : groupBy[0]);\n    },\n\n    groupDesc(groupDesc) {\n      this.updateOptions({\n        groupDesc: wrapInArray(groupDesc)\n      });\n    },\n\n    'internalOptions.groupDesc'(groupDesc, old) {\n      !deepEqual(groupDesc, old) && this.$emit('update:group-desc', Array.isArray(this.groupDesc) ? groupDesc : groupDesc[0]);\n    },\n\n    multiSort(multiSort) {\n      this.updateOptions({\n        multiSort\n      });\n    },\n\n    'internalOptions.multiSort'(multiSort) {\n      this.$emit('update:multi-sort', multiSort);\n    },\n\n    mustSort(mustSort) {\n      this.updateOptions({\n        mustSort\n      });\n    },\n\n    'internalOptions.mustSort'(mustSort) {\n      this.$emit('update:must-sort', mustSort);\n    },\n\n    pageCount: {\n      handler(pageCount) {\n        this.$emit('page-count', pageCount);\n      },\n\n      immediate: true\n    },\n    computedItems: {\n      handler(computedItems) {\n        this.$emit('current-items', computedItems);\n      },\n\n      immediate: true\n    }\n  },\n  methods: {\n    toggle(key, oldBy, oldDesc, page, mustSort, multiSort) {\n      let by = oldBy.slice();\n      let desc = oldDesc.slice();\n      const byIndex = by.findIndex(k => k === key);\n\n      if (byIndex < 0) {\n        if (!multiSort) {\n          by = [];\n          desc = [];\n        }\n\n        by.push(key);\n        desc.push(false);\n      } else if (byIndex >= 0 && !desc[byIndex]) {\n        desc[byIndex] = true;\n      } else if (!mustSort) {\n        by.splice(byIndex, 1);\n        desc.splice(byIndex, 1);\n      } else {\n        desc[byIndex] = false;\n      } // Reset page to 1 if sortBy or sortDesc have changed\n\n\n      if (!deepEqual(by, oldBy) || !deepEqual(desc, oldDesc)) {\n        page = 1;\n      }\n\n      return {\n        by,\n        desc,\n        page\n      };\n    },\n\n    group(key) {\n      const {\n        by: groupBy,\n        desc: groupDesc,\n        page\n      } = this.toggle(key, this.internalOptions.groupBy, this.internalOptions.groupDesc, this.internalOptions.page, true, false);\n      this.updateOptions({\n        groupBy,\n        groupDesc,\n        page\n      });\n    },\n\n    sort(key) {\n      if (Array.isArray(key)) return this.sortArray(key);\n      const {\n        by: sortBy,\n        desc: sortDesc,\n        page\n      } = this.toggle(key, this.internalOptions.sortBy, this.internalOptions.sortDesc, this.internalOptions.page, this.mustSort, this.multiSort);\n      this.updateOptions({\n        sortBy,\n        sortDesc,\n        page\n      });\n    },\n\n    sortArray(sortBy) {\n      const sortDesc = sortBy.map(s => {\n        const i = this.internalOptions.sortBy.findIndex(k => k === s);\n        return i > -1 ? this.internalOptions.sortDesc[i] : false;\n      });\n      this.updateOptions({\n        sortBy,\n        sortDesc\n      });\n    },\n\n    updateOptions(options) {\n      this.internalOptions = { ...this.internalOptions,\n        ...options,\n        page: this.serverItemsLength < 0 ? Math.max(1, Math.min(options.page || this.internalOptions.page, this.pageCount)) : options.page || this.internalOptions.page\n      };\n    },\n\n    sortItems(items) {\n      const sortBy = this.internalOptions.groupBy.concat(this.internalOptions.sortBy);\n      const sortDesc = this.internalOptions.groupDesc.concat(this.internalOptions.sortDesc);\n      return this.customSort(items, sortBy, sortDesc, this.locale);\n    },\n\n    paginateItems(items) {\n      // Make sure we don't try to display non-existant page if items suddenly change\n      // TODO: Could possibly move this to pageStart/pageStop?\n      if (this.serverItemsLength === -1 && items.length <= this.pageStart) {\n        this.internalOptions.page = Math.max(1, this.internalOptions.page - 1);\n      }\n\n      return items.slice(this.pageStart, this.pageStop);\n    }\n\n  },\n\n  render() {\n    return this.$scopedSlots.default && this.$scopedSlots.default(this.scopedProps);\n  }\n\n});",{"version":3,"sources":["../../../src/components/VData/VData.ts"],"names":[],"mappings":"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","sourcesContent":["// Helpers\nimport { wrapInArray, sortItems, deepEqual, groupByProperty, searchItems } from '../../util/helpers'\nimport Vue, { VNode, PropType } from 'vue'\n\nexport interface DataOptions {\n  page: number\n  itemsPerPage: number\n  sortBy: string[]\n  sortDesc: boolean[]\n  groupBy: string[]\n  groupDesc: boolean[]\n  multiSort: boolean\n  mustSort: boolean\n}\n\nexport interface DataPagination {\n  page: number\n  itemsPerPage: number\n  pageStart: number\n  pageStop: number\n  pageCount: number\n  itemsLength: number\n}\n\nexport interface DataProps {\n  originalItemsLength: number\n  items: any[]\n  pagination: DataPagination\n  options: DataOptions\n  updateOptions: (obj: any) => void\n  sort: (value: string) => void\n  group: (value: string) => void\n  groupedItems: Record<string, any[]> | null\n}\n\nexport default Vue.extend({\n  name: 'v-data',\n\n  inheritAttrs: false,\n\n  props: {\n    items: {\n      type: Array as PropType<any[]>,\n      default: () => [],\n    },\n    options: {\n      type: Object,\n      default: () => ({}),\n    },\n    sortBy: {\n      type: [String, Array] as PropType<string | string[]>,\n      default: () => [],\n    },\n    sortDesc: {\n      type: [Boolean, Array] as PropType<boolean | boolean[]>,\n      default: () => [],\n    },\n    customSort: {\n      type: Function as any as PropType<typeof sortItems>,\n      default: sortItems,\n    },\n    mustSort: Boolean,\n    multiSort: Boolean,\n    page: {\n      type: Number,\n      default: 1,\n    },\n    itemsPerPage: {\n      type: Number,\n      default: 10,\n    },\n    groupBy: {\n      type: [String, Array] as PropType<string | string[]>,\n      default: () => [],\n    },\n    groupDesc: {\n      type: [Boolean, Array] as PropType<boolean | boolean[]>,\n      default: () => [],\n    },\n    locale: {\n      type: String,\n      default: 'en-US',\n    },\n    disableSort: Boolean,\n    disablePagination: Boolean,\n    disableFiltering: Boolean,\n    search: String,\n    customFilter: {\n      type: Function as any as PropType<typeof searchItems>,\n      default: searchItems,\n    },\n    serverItemsLength: {\n      type: Number,\n      default: -1,\n    },\n  },\n\n  data () {\n    let internalOptions: DataOptions = {\n      page: this.page,\n      itemsPerPage: this.itemsPerPage,\n      sortBy: wrapInArray(this.sortBy),\n      sortDesc: wrapInArray(this.sortDesc),\n      groupBy: wrapInArray(this.groupBy),\n      groupDesc: wrapInArray(this.groupDesc),\n      mustSort: this.mustSort,\n      multiSort: this.multiSort,\n    }\n\n    if (this.options) {\n      internalOptions = Object.assign(internalOptions, this.options)\n    }\n\n    return {\n      internalOptions,\n    }\n  },\n\n  computed: {\n    itemsLength (): number {\n      return this.serverItemsLength >= 0 ? this.serverItemsLength : this.filteredItems.length\n    },\n    pageCount (): number {\n      return this.internalOptions.itemsPerPage === -1\n        ? 1\n        : Math.ceil(this.itemsLength / this.internalOptions.itemsPerPage) // TODO: can't use items.length here\n    },\n    pageStart (): number {\n      if (this.internalOptions.itemsPerPage === -1 || !this.items.length) return 0\n\n      return (this.internalOptions.page - 1) * this.internalOptions.itemsPerPage\n    },\n    pageStop (): number {\n      if (this.internalOptions.itemsPerPage === -1) return this.itemsLength\n      if (!this.items.length) return 0\n\n      return Math.min(this.itemsLength, this.internalOptions.page * this.internalOptions.itemsPerPage)\n    },\n    isGrouped (): boolean {\n      return !!this.internalOptions.groupBy.length\n    },\n    pagination (): DataPagination {\n      return {\n        page: this.internalOptions.page,\n        itemsPerPage: this.internalOptions.itemsPerPage,\n        pageStart: this.pageStart,\n        pageStop: this.pageStop,\n        pageCount: this.pageCount,\n        itemsLength: this.itemsLength,\n      }\n    },\n    filteredItems (): any[] {\n      let items = this.items.slice()\n\n      if (!this.disableFiltering && this.serverItemsLength <= 0) {\n        items = this.customFilter(items, this.search)\n      }\n\n      return items\n    },\n    computedItems (): any[] {\n      let items = this.filteredItems.slice()\n\n      if (!this.disableSort && this.serverItemsLength <= 0) {\n        items = this.sortItems(items)\n      }\n\n      if (!this.disablePagination && this.serverItemsLength <= 0) {\n        items = this.paginateItems(items)\n      }\n\n      return items\n    },\n    groupedItems (): Record<string, any[]> | null {\n      return this.isGrouped ? groupByProperty(this.computedItems, this.internalOptions.groupBy[0]) : null\n    },\n    scopedProps (): DataProps {\n      const props = {\n        sort: this.sort,\n        sortArray: this.sortArray,\n        group: this.group,\n        items: this.computedItems,\n        options: this.internalOptions,\n        updateOptions: this.updateOptions,\n        pagination: this.pagination,\n        groupedItems: this.groupedItems,\n        originalItemsLength: this.items.length,\n      }\n\n      return props\n    },\n    computedOptions (): DataOptions {\n      return { ...this.options } as DataOptions\n    },\n  },\n\n  watch: {\n    computedOptions: {\n      handler (options: DataOptions, old: DataOptions) {\n        if (deepEqual(options, old)) return\n\n        this.updateOptions(options)\n      },\n      deep: true,\n      immediate: true,\n    },\n    internalOptions: {\n      handler (options: DataOptions, old: DataOptions) {\n        if (deepEqual(options, old)) return\n        this.$emit('update:options', options)\n        this.$emit('pagination', this.pagination)\n      },\n      deep: true,\n      immediate: true,\n    },\n    page (page: number) {\n      this.updateOptions({ page })\n    },\n    'internalOptions.page' (page: number) {\n      this.$emit('update:page', page)\n    },\n    itemsPerPage (itemsPerPage: number) {\n      this.updateOptions({ itemsPerPage })\n    },\n    'internalOptions.itemsPerPage' (itemsPerPage: number) {\n      this.$emit('update:items-per-page', itemsPerPage)\n    },\n    sortBy (sortBy: string | string[]) {\n      this.updateOptions({ sortBy: wrapInArray(sortBy) })\n    },\n    'internalOptions.sortBy' (sortBy: string[], old: string[]) {\n      !deepEqual(sortBy, old) && this.$emit('update:sort-by', Array.isArray(this.sortBy) ? sortBy : sortBy[0])\n    },\n    sortDesc (sortDesc: boolean | boolean[]) {\n      this.updateOptions({ sortDesc: wrapInArray(sortDesc) })\n    },\n    'internalOptions.sortDesc' (sortDesc: boolean[], old: boolean[]) {\n      !deepEqual(sortDesc, old) && this.$emit('update:sort-desc', Array.isArray(this.sortDesc) ? sortDesc : sortDesc[0])\n    },\n    groupBy (groupBy: string | string[]) {\n      this.updateOptions({ groupBy: wrapInArray(groupBy) })\n    },\n    'internalOptions.groupBy' (groupBy: string[], old: string[]) {\n      !deepEqual(groupBy, old) && this.$emit('update:group-by', Array.isArray(this.groupBy) ? groupBy : groupBy[0])\n    },\n    groupDesc (groupDesc: boolean | boolean[]) {\n      this.updateOptions({ groupDesc: wrapInArray(groupDesc) })\n    },\n    'internalOptions.groupDesc' (groupDesc: boolean[], old: boolean[]) {\n      !deepEqual(groupDesc, old) && this.$emit('update:group-desc', Array.isArray(this.groupDesc) ? groupDesc : groupDesc[0])\n    },\n    multiSort (multiSort: boolean) {\n      this.updateOptions({ multiSort })\n    },\n    'internalOptions.multiSort' (multiSort: boolean) {\n      this.$emit('update:multi-sort', multiSort)\n    },\n    mustSort (mustSort: boolean) {\n      this.updateOptions({ mustSort })\n    },\n    'internalOptions.mustSort' (mustSort: boolean) {\n      this.$emit('update:must-sort', mustSort)\n    },\n    pageCount: {\n      handler (pageCount: number) {\n        this.$emit('page-count', pageCount)\n      },\n      immediate: true,\n    },\n    computedItems: {\n      handler (computedItems: any[]) {\n        this.$emit('current-items', computedItems)\n      },\n      immediate: true,\n    },\n  },\n\n  methods: {\n    toggle (key: string, oldBy: string[], oldDesc: boolean[], page: number, mustSort: boolean, multiSort: boolean) {\n      let by = oldBy.slice()\n      let desc = oldDesc.slice()\n      const byIndex = by.findIndex((k: string) => k === key)\n\n      if (byIndex < 0) {\n        if (!multiSort) {\n          by = []\n          desc = []\n        }\n\n        by.push(key)\n        desc.push(false)\n      } else if (byIndex >= 0 && !desc[byIndex]) {\n        desc[byIndex] = true\n      } else if (!mustSort) {\n        by.splice(byIndex, 1)\n        desc.splice(byIndex, 1)\n      } else {\n        desc[byIndex] = false\n      }\n\n      // Reset page to 1 if sortBy or sortDesc have changed\n      if (!deepEqual(by, oldBy) || !deepEqual(desc, oldDesc)) {\n        page = 1\n      }\n\n      return { by, desc, page }\n    },\n    group (key: string): void {\n      const { by: groupBy, desc: groupDesc, page } = this.toggle(\n        key,\n        this.internalOptions.groupBy,\n        this.internalOptions.groupDesc,\n        this.internalOptions.page,\n        true,\n        false\n      )\n      this.updateOptions({ groupBy, groupDesc, page })\n    },\n    sort (key: string | string[]): void {\n      if (Array.isArray(key)) return this.sortArray(key)\n\n      const { by: sortBy, desc: sortDesc, page } = this.toggle(\n        key,\n        this.internalOptions.sortBy,\n        this.internalOptions.sortDesc,\n        this.internalOptions.page,\n        this.mustSort,\n        this.multiSort\n      )\n      this.updateOptions({ sortBy, sortDesc, page })\n    },\n    sortArray (sortBy: string[]) {\n      const sortDesc = sortBy.map(s => {\n        const i = this.internalOptions.sortBy.findIndex((k: string) => k === s)\n        return i > -1 ? this.internalOptions.sortDesc[i] : false\n      })\n\n      this.updateOptions({ sortBy, sortDesc })\n    },\n    updateOptions (options: any) {\n      this.internalOptions = {\n        ...this.internalOptions,\n        ...options,\n        page: this.serverItemsLength < 0\n          ? Math.max(1, Math.min(options.page || this.internalOptions.page, this.pageCount))\n          : options.page || this.internalOptions.page,\n      }\n    },\n    sortItems (items: any[]) {\n      const sortBy = this.internalOptions.groupBy.concat(this.internalOptions.sortBy)\n      const sortDesc = this.internalOptions.groupDesc.concat(this.internalOptions.sortDesc)\n      return this.customSort(items, sortBy, sortDesc, this.locale)\n    },\n    paginateItems (items: any[]) {\n      // Make sure we don't try to display non-existant page if items suddenly change\n      // TODO: Could possibly move this to pageStart/pageStop?\n      if (this.serverItemsLength === -1 && items.length <= this.pageStart) {\n        this.internalOptions.page = Math.max(1, this.internalOptions.page - 1)\n      }\n\n      return items.slice(this.pageStart, this.pageStop)\n    },\n  },\n\n  render (): VNode {\n    return this.$scopedSlots.default && this.$scopedSlots.default(this.scopedProps) as any\n  },\n})\n"],"sourceRoot":""}]}