{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\util\\mergeData.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\util\\mergeData.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { camelize } from './helpers';\nconst pattern = {\n  styleList: /;(?![^(]*\\))/g,\n  styleProp: /:(.*)/\n};\n\nfunction parseStyle(style) {\n  const styleMap = {};\n\n  for (const s of style.split(pattern.styleList)) {\n    let [key, val] = s.split(pattern.styleProp);\n    key = key.trim();\n\n    if (!key) {\n      continue;\n    } // May be undefined if the `key: value` pair is incomplete.\n\n\n    if (typeof val === 'string') {\n      val = val.trim();\n    }\n\n    styleMap[camelize(key)] = val;\n  }\n\n  return styleMap;\n}\n\nexport default function mergeData() {\n  const mergeTarget = {};\n  let i = arguments.length;\n  let prop;\n  let event; // Allow for variadic argument length.\n\n  while (i--) {\n    // Iterate through the data properties and execute merge strategies\n    // Object.keys eliminates need for hasOwnProperty call\n    for (prop of Object.keys(arguments[i])) {\n      switch (prop) {\n        // Array merge strategy (array concatenation)\n        case 'class':\n        case 'style':\n        case 'directives':\n          if (!Array.isArray(mergeTarget[prop])) {\n            mergeTarget[prop] = [];\n          }\n\n          if (prop === 'style') {\n            let style;\n\n            if (Array.isArray(arguments[i].style)) {\n              style = arguments[i].style;\n            } else {\n              style = [arguments[i].style];\n            }\n\n            for (let j = 0; j < style.length; j++) {\n              const s = style[j];\n\n              if (typeof s === 'string') {\n                style[j] = parseStyle(s);\n              }\n            }\n\n            arguments[i].style = style;\n          } // Repackaging in an array allows Vue runtime\n          // to merge class/style bindings regardless of type.\n\n\n          mergeTarget[prop] = mergeTarget[prop].concat(arguments[i][prop]);\n          break;\n        // Space delimited string concatenation strategy\n\n        case 'staticClass':\n          if (!arguments[i][prop]) {\n            break;\n          }\n\n          if (mergeTarget[prop] === undefined) {\n            mergeTarget[prop] = '';\n          }\n\n          if (mergeTarget[prop]) {\n            // Not an empty string, so concatenate\n            mergeTarget[prop] += ' ';\n          }\n\n          mergeTarget[prop] += arguments[i][prop].trim();\n          break;\n        // Object, the properties of which to merge via array merge strategy (array concatenation).\n        // Callback merge strategy merges callbacks to the beginning of the array,\n        // so that the last defined callback will be invoked first.\n        // This is done since to mimic how Object.assign merging\n        // uses the last given value to assign.\n\n        case 'on':\n        case 'nativeOn':\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {};\n          }\n\n          const listeners = mergeTarget[prop];\n\n          for (event of Object.keys(arguments[i][prop] || {})) {\n            // Concat function to array of functions if callback present.\n            if (listeners[event]) {\n              // Insert current iteration data in beginning of merged array.\n              listeners[event] = Array().concat( // eslint-disable-line\n              listeners[event], arguments[i][prop][event]);\n            } else {\n              // Straight assign.\n              listeners[event] = arguments[i][prop][event];\n            }\n          }\n\n          break;\n        // Object merge strategy\n\n        case 'attrs':\n        case 'props':\n        case 'domProps':\n        case 'scopedSlots':\n        case 'staticStyle':\n        case 'hook':\n        case 'transition':\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {};\n          }\n\n          mergeTarget[prop] = { ...arguments[i][prop],\n            ...mergeTarget[prop]\n          };\n          break;\n        // Reassignment strategy (no merge)\n\n        case 'slot':\n        case 'key':\n        case 'ref':\n        case 'tag':\n        case 'show':\n        case 'keepAlive':\n        default:\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = arguments[i][prop];\n          }\n\n      }\n    }\n  }\n\n  return mergeTarget;\n}",{"version":3,"sources":["../../src/util/mergeData.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @copyright 2017 Alex Regan\n * @license MIT\n * @see https://github.com/alexsasharegan/vue-functional-data-merge\n */\n/* eslint-disable max-statements */\nimport { VNodeData } from 'vue'\nimport { camelize } from './helpers'\n\nconst pattern = {\n  styleList: /;(?![^(]*\\))/g,\n  styleProp: /:(.*)/,\n} as const\n\nfunction parseStyle (style: string) {\n  const styleMap: Dictionary<any> = {}\n\n  for (const s of style.split(pattern.styleList)) {\n    let [key, val] = s.split(pattern.styleProp)\n    key = key.trim()\n    if (!key) {\n      continue\n    }\n    // May be undefined if the `key: value` pair is incomplete.\n    if (typeof val === 'string') {\n      val = val.trim()\n    }\n    styleMap[camelize(key)] = val\n  }\n\n  return styleMap\n}\n\n/**\n * Intelligently merges data for createElement.\n * Merges arguments left to right, preferring the right argument.\n * Returns new VNodeData object.\n */\nexport default function mergeData (...vNodeData: VNodeData[]): VNodeData\nexport default function mergeData (): VNodeData {\n  const mergeTarget: VNodeData & Dictionary<any> = {}\n  let i: number = arguments.length\n  let prop: string\n  let event: string\n\n  // Allow for variadic argument length.\n  while (i--) {\n    // Iterate through the data properties and execute merge strategies\n    // Object.keys eliminates need for hasOwnProperty call\n    for (prop of Object.keys(arguments[i])) {\n      switch (prop) {\n        // Array merge strategy (array concatenation)\n        case 'class':\n        case 'style':\n        case 'directives':\n          if (!Array.isArray(mergeTarget[prop])) {\n            mergeTarget[prop] = []\n          }\n\n          if (prop === 'style') {\n            let style: any[]\n            if (Array.isArray(arguments[i].style)) {\n              style = arguments[i].style\n            } else {\n              style = [arguments[i].style]\n            }\n            for (let j = 0; j < style.length; j++) {\n              const s = style[j]\n              if (typeof s === 'string') {\n                style[j] = parseStyle(s)\n              }\n            }\n            arguments[i].style = style\n          }\n\n          // Repackaging in an array allows Vue runtime\n          // to merge class/style bindings regardless of type.\n          mergeTarget[prop] = mergeTarget[prop].concat(arguments[i][prop])\n          break\n        // Space delimited string concatenation strategy\n        case 'staticClass':\n          if (!arguments[i][prop]) {\n            break\n          }\n          if (mergeTarget[prop] === undefined) {\n            mergeTarget[prop] = ''\n          }\n          if (mergeTarget[prop]) {\n            // Not an empty string, so concatenate\n            mergeTarget[prop] += ' '\n          }\n          mergeTarget[prop] += arguments[i][prop].trim()\n          break\n        // Object, the properties of which to merge via array merge strategy (array concatenation).\n        // Callback merge strategy merges callbacks to the beginning of the array,\n        // so that the last defined callback will be invoked first.\n        // This is done since to mimic how Object.assign merging\n        // uses the last given value to assign.\n        case 'on':\n        case 'nativeOn':\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {}\n          }\n          const listeners = mergeTarget[prop]!\n          for (event of Object.keys(arguments[i][prop] || {})) {\n            // Concat function to array of functions if callback present.\n            if (listeners[event]) {\n              // Insert current iteration data in beginning of merged array.\n              listeners[event] = Array<Function>().concat( // eslint-disable-line\n                listeners[event],\n                arguments[i][prop][event]\n              )\n            } else {\n              // Straight assign.\n              listeners[event] = arguments[i][prop][event]\n            }\n          }\n          break\n        // Object merge strategy\n        case 'attrs':\n        case 'props':\n        case 'domProps':\n        case 'scopedSlots':\n        case 'staticStyle':\n        case 'hook':\n        case 'transition':\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {}\n          }\n          mergeTarget[prop] = { ...arguments[i][prop], ...mergeTarget[prop] }\n          break\n        // Reassignment strategy (no merge)\n        case 'slot':\n        case 'key':\n        case 'ref':\n        case 'tag':\n        case 'show':\n        case 'keepAlive':\n        default:\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = arguments[i][prop]\n          }\n      }\n    }\n  }\n\n  return mergeTarget\n}\n"],"sourceRoot":""}]}