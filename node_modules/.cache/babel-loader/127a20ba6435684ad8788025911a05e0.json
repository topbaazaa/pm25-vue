{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VGrid\\VCol.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VGrid\\VCol.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"../../../src/components/VGrid/VGrid.sass\";\nimport Vue from 'vue';\nimport mergeData from '../../util/mergeData';\nimport { upperFirst } from '../../util/helpers'; // no xs\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl'];\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false\n    };\n    return props;\n  }, {});\n})();\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps)\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = type;\n\n  if (val == null || val === false) {\n    return undefined;\n  }\n\n  if (prop) {\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nconst cache = new Map();\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: str => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str)\n    },\n    justifySelf: {\n      type: String,\n      default: null,\n      validator: str => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str)\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n\n  render(h, {\n    props,\n    data,\n    children,\n    parent\n  }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = '';\n\n    for (const prop in props) {\n      cacheKey += String(props[prop]);\n    }\n\n    let classList = cache.get(cacheKey);\n\n    if (!classList) {\n      classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('col-'));\n      classList.push({\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: !hasColClasses || !props.cols,\n        [`col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf,\n        [`justify-self-${props.justifySelf}`]: props.justifySelf\n      });\n      cache.set(cacheKey, classList);\n    }\n\n    return h(props.tag, mergeData(data, {\n      class: classList\n    }), children);\n  }\n\n});",{"version":3,"sources":["../../../src/components/VGrid/VCol.ts"],"names":[],"mappings":"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","sourcesContent":["import './VGrid.sass'\n\nimport Vue, { VNode, PropOptions } from 'vue'\nimport mergeData from '../../util/mergeData'\nimport { upperFirst } from '../../util/helpers'\n\n// no xs\nconst breakpoints = ['sm', 'md', 'lg', 'xl']\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps),\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: boolean | string | number) {\n  let className = type\n  if (val == null || val === false) {\n    return undefined\n  }\n  if (prop) {\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase()\n  }\n  // .order-md-6\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst cache = new Map<string, any[]>()\n\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null,\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null,\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: (str: any) => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str),\n    },\n    justifySelf: {\n      type: String,\n      default: null,\n      validator: (str: any) => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str),\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n  render (h, { props, data, children, parent }): VNode {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = ''\n    for (const prop in props) {\n      cacheKey += String((props as any)[prop])\n    }\n    let classList = cache.get(cacheKey)\n\n    if (!classList) {\n      classList = []\n      // Loop through `col`, `offset`, `order` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string | number | boolean = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('col-'))\n\n      classList.push({\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: !hasColClasses || !props.cols,\n        [`col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf,\n        [`justify-self-${props.justifySelf}`]: props.justifySelf,\n      })\n\n      cache.set(cacheKey, classList)\n    }\n\n    return h(props.tag, mergeData(data, { class: classList }), children)\n  },\n})\n"],"sourceRoot":""}]}