{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VColorPicker\\VColorPickerEdit.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VColorPicker\\VColorPickerEdit.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VColorPicker/VColorPickerEdit.sass\"; // Components\n\nimport VBtn from '../VBtn';\nimport VIcon from '../VIcon'; // Helpers\n\nimport { parseHex } from '../../util/colorUtils'; // Types\n\nimport Vue from 'vue';\nimport { fromRGBA, fromHexa, fromHSLA } from './util';\nexport const modes = {\n  rgba: {\n    inputs: [['r', 255, 'int'], ['g', 255, 'int'], ['b', 255, 'int'], ['a', 1, 'float']],\n    from: fromRGBA\n  },\n  hsla: {\n    inputs: [['h', 360, 'int'], ['s', 1, 'float'], ['l', 1, 'float'], ['a', 1, 'float']],\n    from: fromHSLA\n  },\n  hexa: {\n    from: fromHexa\n  }\n};\nexport default Vue.extend({\n  name: 'v-color-picker-edit',\n  props: {\n    color: Object,\n    disabled: Boolean,\n    hideAlpha: Boolean,\n    hideModeSwitch: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: v => Object.keys(modes).includes(v)\n    }\n  },\n\n  data() {\n    return {\n      modes,\n      internalMode: this.mode\n    };\n  },\n\n  computed: {\n    currentMode() {\n      return this.modes[this.internalMode];\n    }\n\n  },\n  watch: {\n    mode(mode) {\n      this.internalMode = mode;\n    }\n\n  },\n\n  created() {\n    this.internalMode = this.mode;\n  },\n\n  methods: {\n    getValue(v, type) {\n      if (type === 'float') return Math.round(v * 100) / 100;else if (type === 'int') return Math.round(v);else return 0;\n    },\n\n    parseValue(v, type) {\n      if (type === 'float') return parseFloat(v);else if (type === 'int') return parseInt(v, 10) || 0;else return 0;\n    },\n\n    changeMode() {\n      const modes = Object.keys(this.modes);\n      const index = modes.indexOf(this.internalMode);\n      const newMode = modes[(index + 1) % modes.length];\n      this.internalMode = newMode;\n      this.$emit('update:mode', newMode);\n    },\n\n    genInput(target, attrs, value, on) {\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__input'\n      }, [this.$createElement('input', {\n        key: target,\n        attrs,\n        domProps: {\n          value\n        },\n        on\n      }), this.$createElement('span', target.toUpperCase())]);\n    },\n\n    genInputs() {\n      switch (this.internalMode) {\n        case 'hexa':\n          {\n            const hex = this.color.hexa;\n            const value = this.hideAlpha && hex.endsWith('FF') ? hex.substr(0, 7) : hex;\n            return this.genInput('hex', {\n              maxlength: this.hideAlpha ? 7 : 9,\n              disabled: this.disabled\n            }, value, {\n              change: e => {\n                const el = e.target;\n                this.$emit('update:color', this.currentMode.from(parseHex(el.value)));\n              }\n            });\n          }\n\n        default:\n          {\n            const inputs = this.hideAlpha ? this.currentMode.inputs.slice(0, -1) : this.currentMode.inputs;\n            return inputs.map(([target, max, type]) => {\n              const value = this.color[this.internalMode];\n              return this.genInput(target, {\n                type: 'number',\n                min: 0,\n                max,\n                step: type === 'float' ? '0.01' : type === 'int' ? '1' : undefined,\n                disabled: this.disabled\n              }, this.getValue(value[target], type), {\n                input: e => {\n                  const el = e.target;\n                  const newVal = this.parseValue(el.value || '0', type);\n                  this.$emit('update:color', this.currentMode.from(Object.assign({}, value, {\n                    [target]: newVal\n                  }), this.color.alpha));\n                }\n              });\n            });\n          }\n      }\n    },\n\n    genSwitch() {\n      return this.$createElement(VBtn, {\n        props: {\n          small: true,\n          icon: true,\n          disabled: this.disabled\n        },\n        on: {\n          click: this.changeMode\n        }\n      }, [this.$createElement(VIcon, '$unfold')]);\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-color-picker__edit'\n    }, [this.genInputs(), !this.hideModeSwitch && this.genSwitch()]);\n  }\n\n});",{"version":3,"sources":["../../../src/components/VColorPicker/VColorPickerEdit.ts"],"names":[],"mappings":"AAAA;AACA,OAAA,4DAAA,C,CAEA;;AACA,OAAA,IAAA,MAAA,SAAA;AACA,OAAA,KAAA,MAAA,UAAA,C,CAEA;;AACA,SAAA,QAAA,QAAA,uBAAA,C,CAEA;;AACA,OAAA,GAAA,MAAA,KAAA;AAEA,SAAA,QAAA,EAAA,QAAA,EAAA,QAAA,QAAA,QAAA;AASA,OAAO,MAAM,KAAK,GAAG;AACnB,EAAA,IAAI,EAAE;AACJ,IAAA,MAAM,EAAE,CACN,CAAA,GAAA,EAAA,GAAA,EADM,KACN,CADM,EAEN,CAAA,GAAA,EAAA,GAAA,EAFM,KAEN,CAFM,EAGN,CAAA,GAAA,EAAA,GAAA,EAHM,KAGN,CAHM,EAIN,CAAA,GAAA,EAAA,CAAA,EALE,OAKF,CAJM,CADJ;AAOJ,IAAA,IAAI,EAAE;AAPF,GADa;AAUnB,EAAA,IAAI,EAAE;AACJ,IAAA,MAAM,EAAE,CACN,CAAA,GAAA,EAAA,GAAA,EADM,KACN,CADM,EAEN,CAAA,GAAA,EAAA,CAAA,EAFM,OAEN,CAFM,EAGN,CAAA,GAAA,EAAA,CAAA,EAHM,OAGN,CAHM,EAIN,CAAA,GAAA,EAAA,CAAA,EALE,OAKF,CAJM,CADJ;AAOJ,IAAA,IAAI,EAAE;AAPF,GAVa;AAmBnB,EAAA,IAAI,EAAE;AACJ,IAAA,IAAI,EAAE;AADF;AAnBa,CAAd;AAwBP,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EADoB,qBAAA;AAGxB,EAAA,KAAK,EAAE;AACL,IAAA,KAAK,EADA,MAAA;AAEL,IAAA,QAAQ,EAFH,OAAA;AAGL,IAAA,SAAS,EAHJ,OAAA;AAIL,IAAA,cAAc,EAJT,OAAA;AAKL,IAAA,IAAI,EAAE;AACJ,MAAA,IAAI,EADA,MAAA;AAEJ,MAAA,OAAO,EAFH,MAAA;AAGJ,MAAA,SAAS,EAAG,CAAD,IAAe,MAAM,CAAN,IAAA,CAAA,KAAA,EAAA,QAAA,CAAA,CAAA;AAHtB;AALD,GAHiB;;AAexB,EAAA,IAAI,GAAA;AACF,WAAO;AAAA,MAAA,KAAA;AAEL,MAAA,YAAY,EAAE,KAAK;AAFd,KAAP;AAhBsB,GAAA;;AAsBxB,EAAA,QAAQ,EAAE;AACR,IAAA,WAAW,GAAA;AACT,aAAO,KAAA,KAAA,CAAW,KAAlB,YAAO,CAAP;AACD;;AAHO,GAtBc;AA4BxB,EAAA,KAAK,EAAE;AACL,IAAA,IAAI,CAAA,IAAA,EAAM;AACR,WAAA,YAAA,GAAA,IAAA;AACD;;AAHI,GA5BiB;;AAkCxB,EAAA,OAAO,GAAA;AACL,SAAA,YAAA,GAAoB,KAApB,IAAA;AAnCsB,GAAA;;AAsCxB,EAAA,OAAO,EAAE;AACP,IAAA,QAAQ,CAAA,CAAA,EAAA,IAAA,EAAsB;AAC5B,UAAI,IAAI,KAAR,OAAA,EAAsB,OAAO,IAAI,CAAJ,KAAA,CAAW,CAAC,GAAZ,GAAA,IAA7B,GAAsB,CAAtB,KACK,IAAI,IAAI,KAAR,KAAA,EAAoB,OAAO,IAAI,CAAJ,KAAA,CAA3B,CAA2B,CAAP,CAApB,KACA,OAAA,CAAA;AAJA,KAAA;;AAMP,IAAA,UAAU,CAAA,CAAA,EAAA,IAAA,EAAyB;AACjC,UAAI,IAAI,KAAR,OAAA,EAAsB,OAAO,UAAU,CAAvC,CAAuC,CAAjB,CAAtB,KACK,IAAI,IAAI,KAAR,KAAA,EAAoB,OAAO,QAAQ,CAAA,CAAA,EAAR,EAAQ,CAAR,IAA3B,CAAoB,CAApB,KACA,OAAA,CAAA;AATA,KAAA;;AAWP,IAAA,UAAU,GAAA;AACR,YAAM,KAAK,GAAG,MAAM,CAAN,IAAA,CAAY,KAA1B,KAAc,CAAd;AACA,YAAM,KAAK,GAAG,KAAK,CAAL,OAAA,CAAc,KAA5B,YAAc,CAAd;AACA,YAAM,OAAO,GAAG,KAAK,CAAC,CAAC,KAAK,GAAN,CAAA,IAAc,KAAK,CAAzC,MAAqB,CAArB;AACA,WAAA,YAAA,GAAA,OAAA;AACA,WAAA,KAAA,CAAA,aAAA,EAAA,OAAA;AAhBK,KAAA;;AAkBP,IAAA,QAAQ,CAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAiD;AACvD,aAAO,KAAA,cAAA,CAAA,KAAA,EAA2B;AAChC,QAAA,WAAW,EAAE;AADmB,OAA3B,EAEJ,CACD,KAAA,cAAA,CAAA,OAAA,EAA6B;AAC3B,QAAA,GAAG,EADwB,MAAA;AAAA,QAAA,KAAA;AAG3B,QAAA,QAAQ,EAAE;AACR,UAAA;AADQ,SAHiB;AAM3B,QAAA;AAN2B,OAA7B,CADC,EASD,KAAA,cAAA,CAAA,MAAA,EAA4B,MAAM,CAXpC,WAW8B,EAA5B,CATC,CAFI,CAAP;AAnBK,KAAA;;AAiCP,IAAA,SAAS,GAAA;AACP,cAAQ,KAAR,YAAA;AACE,aAAA,MAAA;AAAa;AACX,kBAAM,GAAG,GAAG,KAAA,KAAA,CAAZ,IAAA;AACA,kBAAM,KAAK,GAAG,KAAA,SAAA,IAAkB,GAAG,CAAH,QAAA,CAAlB,IAAkB,CAAlB,GAAuC,GAAG,CAAH,MAAA,CAAA,CAAA,EAAvC,CAAuC,CAAvC,GAAd,GAAA;AACA,mBAAO,KAAA,QAAA,CAAA,KAAA,EAEL;AACE,cAAA,SAAS,EAAE,KAAA,SAAA,GAAA,CAAA,GADb,CAAA;AAEE,cAAA,QAAQ,EAAE,KAAK;AAFjB,aAFK,EAAA,KAAA,EAOL;AACE,cAAA,MAAM,EAAG,CAAD,IAAa;AACnB,sBAAM,EAAE,GAAG,CAAC,CAAZ,MAAA;AACA,qBAAA,KAAA,CAAA,cAAA,EAA2B,KAAA,WAAA,CAAA,IAAA,CAAsB,QAAQ,CAAC,EAAE,CAA5D,KAAyD,CAA9B,CAA3B;AACD;AAJH,aAPK,CAAP;AAcD;;AACD;AAAS;AACP,kBAAM,MAAM,GAAG,KAAA,SAAA,GAAiB,KAAA,WAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,EAAkC,CAAnD,CAAiB,CAAjB,GAAyD,KAAA,WAAA,CAAxE,MAAA;AACA,mBAAO,MAAM,CAAN,GAAA,CAAW,CAAC,CAAA,MAAA,EAAA,GAAA,EAAD,IAAC,CAAD,KAAwB;AACxC,oBAAM,KAAK,GAAG,KAAA,KAAA,CAAW,KAAzB,YAAc,CAAd;AACA,qBAAO,KAAA,QAAA,CAAA,MAAA,EAEL;AACE,gBAAA,IAAI,EADN,QAAA;AAEE,gBAAA,GAAG,EAFL,CAAA;AAAA,gBAAA,GAAA;AAIE,gBAAA,IAAI,EAAE,IAAI,KAAJ,OAAA,GAAA,MAAA,GAA4B,IAAI,KAAJ,KAAA,GAAA,GAAA,GAJpC,SAAA;AAKE,gBAAA,QAAQ,EAAE,KAAK;AALjB,eAFK,EASL,KAAA,QAAA,CAAc,KAAK,CAAnB,MAAmB,CAAnB,EATK,IASL,CATK,EAUL;AACE,gBAAA,KAAK,EAAG,CAAD,IAAa;AAClB,wBAAM,EAAE,GAAG,CAAC,CAAZ,MAAA;AACA,wBAAM,MAAM,GAAG,KAAA,UAAA,CAAgB,EAAE,CAAF,KAAA,IAAhB,GAAA,EAAf,IAAe,CAAf;AAEA,uBAAA,KAAA,CAAA,cAAA,EAA2B,KAAA,WAAA,CAAA,IAAA,CACzB,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyB;AAAE,qBAAA,MAAA,GAAU;AAAZ,mBAAzB,CADyB,EAEzB,KAAA,KAAA,CAFF,KAA2B,CAA3B;AAID;AATH,eAVK,CAAP;AAFF,aAAO,CAAP;AAyBD;AA9CH;AAlCK,KAAA;;AAmFP,IAAA,SAAS,GAAA;AACP,aAAO,KAAA,cAAA,CAAA,IAAA,EAA0B;AAC/B,QAAA,KAAK,EAAE;AACL,UAAA,KAAK,EADA,IAAA;AAEL,UAAA,IAAI,EAFC,IAAA;AAGL,UAAA,QAAQ,EAAE,KAAK;AAHV,SADwB;AAM/B,QAAA,EAAE,EAAE;AACF,UAAA,KAAK,EAAE,KAAK;AADV;AAN2B,OAA1B,EASJ,CACD,KAAA,cAAA,CAAA,KAAA,EAVF,SAUE,CADC,CATI,CAAP;AAYD;;AAhGM,GAtCe;;AAyIxB,EAAA,MAAM,CAAA,CAAA,EAAG;AACP,WAAO,CAAC,CAAA,KAAA,EAAQ;AACd,MAAA,WAAW,EAAE;AADC,KAAR,EAEL,CACD,KADC,SACD,EADC,EAED,CAAC,KAAD,cAAA,IAAwB,KAJ1B,SAI0B,EAFvB,CAFK,CAAR;AAMD;;AAhJuB,CAAX,CAAf","sourcesContent":["// Styles\nimport './VColorPickerEdit.sass'\n\n// Components\nimport VBtn from '../VBtn'\nimport VIcon from '../VIcon'\n\n// Helpers\nimport { parseHex } from '../../util/colorUtils'\n\n// Types\nimport Vue, { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport { VColorPickerColor, fromRGBA, fromHexa, fromHSLA } from './util'\n\ntype Input = [string, number, string]\n\nexport type Mode = {\n  inputs?: Input[]\n  from: Function\n}\n\nexport const modes = {\n  rgba: {\n    inputs: [\n      ['r', 255, 'int'],\n      ['g', 255, 'int'],\n      ['b', 255, 'int'],\n      ['a', 1, 'float'],\n    ],\n    from: fromRGBA,\n  },\n  hsla: {\n    inputs: [\n      ['h', 360, 'int'],\n      ['s', 1, 'float'],\n      ['l', 1, 'float'],\n      ['a', 1, 'float'],\n    ],\n    from: fromHSLA,\n  },\n  hexa: {\n    from: fromHexa,\n  },\n} as { [key: string]: Mode }\n\nexport default Vue.extend({\n  name: 'v-color-picker-edit',\n\n  props: {\n    color: Object as PropValidator<VColorPickerColor>,\n    disabled: Boolean,\n    hideAlpha: Boolean,\n    hideModeSwitch: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: (v: string) => Object.keys(modes).includes(v),\n    },\n  },\n\n  data () {\n    return {\n      modes,\n      internalMode: this.mode,\n    }\n  },\n\n  computed: {\n    currentMode (): Mode {\n      return this.modes[this.internalMode]\n    },\n  },\n\n  watch: {\n    mode (mode) {\n      this.internalMode = mode\n    },\n  },\n\n  created () {\n    this.internalMode = this.mode\n  },\n\n  methods: {\n    getValue (v: any, type: string) {\n      if (type === 'float') return Math.round(v * 100) / 100\n      else if (type === 'int') return Math.round(v)\n      else return 0\n    },\n    parseValue (v: string, type: string) {\n      if (type === 'float') return parseFloat(v)\n      else if (type === 'int') return parseInt(v, 10) || 0\n      else return 0\n    },\n    changeMode () {\n      const modes = Object.keys(this.modes)\n      const index = modes.indexOf(this.internalMode)\n      const newMode = modes[(index + 1) % modes.length]\n      this.internalMode = newMode\n      this.$emit('update:mode', newMode)\n    },\n    genInput (target: string, attrs: any, value: any, on: any): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__input',\n      }, [\n        this.$createElement('input', {\n          key: target,\n          attrs,\n          domProps: {\n            value,\n          },\n          on,\n        }),\n        this.$createElement('span', target.toUpperCase()),\n      ])\n    },\n    genInputs (): VNode[] | VNode {\n      switch (this.internalMode) {\n        case 'hexa': {\n          const hex = this.color.hexa\n          const value = this.hideAlpha && hex.endsWith('FF') ? hex.substr(0, 7) : hex\n          return this.genInput(\n            'hex',\n            {\n              maxlength: this.hideAlpha ? 7 : 9,\n              disabled: this.disabled,\n            },\n            value,\n            {\n              change: (e: Event) => {\n                const el = e.target as HTMLInputElement\n                this.$emit('update:color', this.currentMode.from(parseHex(el.value)))\n              },\n            }\n          )\n        }\n        default: {\n          const inputs = this.hideAlpha ? this.currentMode.inputs!.slice(0, -1) : this.currentMode.inputs!\n          return inputs.map(([target, max, type]) => {\n            const value = this.color[this.internalMode as keyof VColorPickerColor] as any\n            return this.genInput(\n              target,\n              {\n                type: 'number',\n                min: 0,\n                max,\n                step: type === 'float' ? '0.01' : type === 'int' ? '1' : undefined,\n                disabled: this.disabled,\n              },\n              this.getValue(value[target], type),\n              {\n                input: (e: Event) => {\n                  const el = e.target as HTMLInputElement\n                  const newVal = this.parseValue(el.value || '0', type)\n\n                  this.$emit('update:color', this.currentMode.from(\n                    Object.assign({}, value, { [target]: newVal }),\n                    this.color.alpha\n                  ))\n                },\n              }\n            )\n          })\n        }\n      }\n    },\n    genSwitch (): VNode {\n      return this.$createElement(VBtn, {\n        props: {\n          small: true,\n          icon: true,\n          disabled: this.disabled,\n        },\n        on: {\n          click: this.changeMode,\n        },\n      }, [\n        this.$createElement(VIcon, '$unfold'),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-color-picker__edit',\n    }, [\n      this.genInputs(),\n      !this.hideModeSwitch && this.genSwitch(),\n    ])\n  },\n})\n"],"sourceRoot":""}]}