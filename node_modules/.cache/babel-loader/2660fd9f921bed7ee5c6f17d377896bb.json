{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\services\\lang\\index.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\services\\lang\\index.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Extensions\nimport { Service } from '../service'; // Language\n\nimport en from '../../locale/en'; // Utilities\n\nimport { getObjectValueByPath } from '../../util/helpers';\nimport { consoleError, consoleWarn } from '../../util/console';\nconst LANG_PREFIX = '$vuetify.';\nconst fallback = Symbol('Lang fallback');\n\nfunction getTranslation(locale, key, usingFallback = false) {\n  const shortKey = key.replace(LANG_PREFIX, '');\n  let translation = getObjectValueByPath(locale, shortKey, fallback);\n\n  if (translation === fallback) {\n    if (usingFallback) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`);\n      translation = key;\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`);\n      translation = getTranslation(en, key, true);\n    }\n  }\n\n  return translation;\n}\n\nexport class Lang extends Service {\n  constructor(options = {}) {\n    super();\n    this.current = options.current || 'en';\n    this.locales = Object.assign({\n      en\n    }, options.locales);\n    this.translator = options.t;\n  }\n\n  t(key, ...params) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params);\n    if (this.translator) return this.translator(key, ...params);\n    const translation = getTranslation(this.locales[this.current], key);\n    return this.replace(translation, params);\n  }\n\n  replace(str, params) {\n    return str.replace(/\\{(\\d+)\\}/g, (match, index) => {\n      /* istanbul ignore next */\n      return String(params[+index]);\n    });\n  }\n\n}\nLang.property = 'lang';",{"version":3,"sources":["../../../src/services/lang/index.ts"],"names":[],"mappings":"AAAA;AACA,SAAA,OAAA,QAAA,YAAA,C,CAEA;;AACA,OAAA,EAAA,MAAA,iBAAA,C,CAEA;;AACA,SAAA,oBAAA,QAAA,oBAAA;AACA,SAAA,YAAA,EAAA,WAAA,QAAA,oBAAA;AAQA,MAAM,WAAW,GAAjB,WAAA;AACA,MAAM,QAAQ,GAAG,MAAM,CAAvB,eAAuB,CAAvB;;AAEA,SAAA,cAAA,CAAA,MAAA,EAAA,GAAA,EAGE,aAAa,GAHf,KAAA,EAGuB;AAErB,QAAM,QAAQ,GAAG,GAAG,CAAH,OAAA,CAAA,WAAA,EAAjB,EAAiB,CAAjB;AACA,MAAI,WAAW,GAAG,oBAAoB,CAAA,MAAA,EAAA,QAAA,EAAtC,QAAsC,CAAtC;;AAEA,MAAI,WAAW,KAAf,QAAA,EAA8B;AAC5B,QAAA,aAAA,EAAmB;AACjB,MAAA,YAAY,CAAC,oBAAoB,QAAjC,yBAAY,CAAZ;AACA,MAAA,WAAW,GAAX,GAAA;AAFF,KAAA,MAGO;AACL,MAAA,WAAW,CAAC,oBAAoB,QAAhC,sCAAW,CAAX;AACA,MAAA,WAAW,GAAG,cAAc,CAAA,EAAA,EAAA,GAAA,EAA5B,IAA4B,CAA5B;AACD;AACF;;AAED,SAAA,WAAA;AACD;;AAED,OAAM,MAAA,IAAA,SAAA,OAAA,CAA2B;AAS/B,EAAA,WAAA,CAAa,OAAA,GAAb,EAAA,EAAyC;AACvC;AACA,SAAA,OAAA,GAAe,OAAO,CAAP,OAAA,IAAf,IAAA;AACA,SAAA,OAAA,GAAe,MAAM,CAAN,MAAA,CAAc;AAAE,MAAA;AAAF,KAAd,EAAsB,OAAO,CAA5C,OAAe,CAAf;AACA,SAAA,UAAA,GAAkB,OAAO,CAAzB,CAAA;AACD;;AAEM,EAAA,CAAC,CAAA,GAAA,EAAe,GAAf,MAAA,EAA+B;AACrC,QAAI,CAAC,GAAG,CAAH,UAAA,CAAL,WAAK,CAAL,EAAkC,OAAO,KAAA,OAAA,CAAA,GAAA,EAAP,MAAO,CAAP;AAElC,QAAI,KAAJ,UAAA,EAAqB,OAAO,KAAA,UAAA,CAAA,GAAA,EAAqB,GAA5B,MAAO,CAAP;AAErB,UAAM,WAAW,GAAG,cAAc,CAAC,KAAA,OAAA,CAAa,KAAd,OAAC,CAAD,EAAlC,GAAkC,CAAlC;AAEA,WAAO,KAAA,OAAA,CAAA,WAAA,EAAP,MAAO,CAAP;AACD;;AAEO,EAAA,OAAO,CAAA,GAAA,EAAA,MAAA,EAA4B;AACzC,WAAO,GAAG,CAAH,OAAA,CAAA,YAAA,EAA0B,CAAA,KAAA,EAAA,KAAA,KAAiC;AAChE;AACA,aAAO,MAAM,CAAC,MAAM,CAAC,CAArB,KAAoB,CAAP,CAAb;AAFF,KAAO,CAAP;AAID;;AA/B8B;AACxB,IAAA,CAAA,QAAA,GAAA,MAAA","sourcesContent":["// Extensions\nimport { Service } from '../service'\n\n// Language\nimport en from '../../locale/en'\n\n// Utilities\nimport { getObjectValueByPath } from '../../util/helpers'\nimport { consoleError, consoleWarn } from '../../util/console'\n\n// Types\nimport {\n  VuetifyLocale,\n  Lang as ILang,\n} from 'vuetify/types/services/lang'\n\nconst LANG_PREFIX = '$vuetify.'\nconst fallback = Symbol('Lang fallback')\n\nfunction getTranslation (\n  locale: VuetifyLocale,\n  key: string,\n  usingFallback = false\n): string {\n  const shortKey = key.replace(LANG_PREFIX, '')\n  let translation = getObjectValueByPath(locale, shortKey, fallback) as string | typeof fallback\n\n  if (translation === fallback) {\n    if (usingFallback) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`)\n      translation = key\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`)\n      translation = getTranslation(en, key, true)\n    }\n  }\n\n  return translation\n}\n\nexport class Lang extends Service implements ILang {\n  static property = 'lang'\n\n  public locales: Record<string, VuetifyLocale>\n\n  public current: string\n\n  private translator: ((key: string, ...params: any[]) => string) | undefined\n\n  constructor (options: Partial<ILang> = {}) {\n    super()\n    this.current = options.current || 'en'\n    this.locales = Object.assign({ en }, options.locales)\n    this.translator = options.t\n  }\n\n  public t (key: string, ...params: any[]) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params)\n\n    if (this.translator) return this.translator(key, ...params)\n\n    const translation = getTranslation(this.locales[this.current], key)\n\n    return this.replace(translation, params)\n  }\n\n  private replace (str: string, params: any[]) {\n    return str.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n      /* istanbul ignore next */\n      return String(params[+index])\n    })\n  }\n}\n"],"sourceRoot":""}]}