{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\mixins\\translatable\\index.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\mixins\\translatable\\index.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nexport default Vue.extend({\n  name: 'translatable',\n  props: {\n    height: Number\n  },\n  data: () => ({\n    elOffsetTop: 0,\n    parallax: 0,\n    parallaxDist: 0,\n    percentScrolled: 0,\n    scrollTop: 0,\n    windowHeight: 0,\n    windowBottom: 0\n  }),\n  computed: {\n    imgHeight() {\n      return this.objHeight();\n    }\n\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.translate, false);\n    window.removeEventListener('resize', this.translate, false);\n  },\n\n  methods: {\n    calcDimensions() {\n      const offset = this.$el.getBoundingClientRect();\n      this.scrollTop = window.pageYOffset;\n      this.parallaxDist = this.imgHeight - this.height;\n      this.elOffsetTop = offset.top + this.scrollTop;\n      this.windowHeight = window.innerHeight;\n      this.windowBottom = this.scrollTop + this.windowHeight;\n    },\n\n    listeners() {\n      window.addEventListener('scroll', this.translate, false);\n      window.addEventListener('resize', this.translate, false);\n    },\n\n    /** @abstract **/\n    objHeight() {\n      throw new Error('Not implemented !');\n    },\n\n    translate() {\n      this.calcDimensions();\n      this.percentScrolled = (this.windowBottom - this.elOffsetTop) / (parseInt(this.height) + this.windowHeight);\n      this.parallax = Math.round(this.parallaxDist * this.percentScrolled);\n    }\n\n  }\n});",{"version":3,"sources":["../../../src/mixins/translatable/index.ts"],"names":[],"mappings":"AAAA,OAAA,GAAA,MAAA,KAAA;AAEA,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EADoB,cAAA;AAGxB,EAAA,KAAK,EAAE;AACL,IAAA,MAAM,EAAE;AADH,GAHiB;AAOxB,EAAA,IAAI,EAAE,OAAO;AACX,IAAA,WAAW,EADA,CAAA;AAEX,IAAA,QAAQ,EAFG,CAAA;AAGX,IAAA,YAAY,EAHD,CAAA;AAIX,IAAA,eAAe,EAJJ,CAAA;AAKX,IAAA,SAAS,EALE,CAAA;AAMX,IAAA,YAAY,EAND,CAAA;AAOX,IAAA,YAAY,EAAE;AAPH,GAAP,CAPkB;AAiBxB,EAAA,QAAQ,EAAE;AACR,IAAA,SAAS,GAAA;AACP,aAAO,KAAP,SAAO,EAAP;AACD;;AAHO,GAjBc;;AAuBxB,EAAA,aAAa,GAAA;AACX,IAAA,MAAM,CAAN,mBAAA,CAAA,QAAA,EAAqC,KAArC,SAAA,EAAA,KAAA;AACA,IAAA,MAAM,CAAN,mBAAA,CAAA,QAAA,EAAqC,KAArC,SAAA,EAAA,KAAA;AAzBsB,GAAA;;AA4BxB,EAAA,OAAO,EAAE;AACP,IAAA,cAAc,GAAA;AACZ,YAAM,MAAM,GAAG,KAAA,GAAA,CAAf,qBAAe,EAAf;AAEA,WAAA,SAAA,GAAiB,MAAM,CAAvB,WAAA;AACA,WAAA,YAAA,GAAoB,KAAA,SAAA,GAAiB,KAArC,MAAA;AACA,WAAA,WAAA,GAAmB,MAAM,CAAN,GAAA,GAAa,KAAhC,SAAA;AACA,WAAA,YAAA,GAAoB,MAAM,CAA1B,WAAA;AACA,WAAA,YAAA,GAAoB,KAAA,SAAA,GAAiB,KAArC,YAAA;AARK,KAAA;;AAUP,IAAA,SAAS,GAAA;AACP,MAAA,MAAM,CAAN,gBAAA,CAAA,QAAA,EAAkC,KAAlC,SAAA,EAAA,KAAA;AACA,MAAA,MAAM,CAAN,gBAAA,CAAA,QAAA,EAAkC,KAAlC,SAAA,EAAA,KAAA;AAZK,KAAA;;AAcP;AACA,IAAA,SAAS,GAAA;AACP,YAAM,IAAA,KAAA,CAAN,mBAAM,CAAN;AAhBK,KAAA;;AAkBP,IAAA,SAAS,GAAA;AACP,WAAA,cAAA;AAEA,WAAA,eAAA,GACE,CAAC,KAAA,YAAA,GAAoB,KAArB,WAAA,KACC,QAAQ,CAAC,KAAT,MAAQ,CAAR,GAAwB,KAF3B,YACE,CADF;AAKA,WAAA,QAAA,GAAgB,IAAI,CAAJ,KAAA,CAAW,KAAA,YAAA,GAAoB,KAA/C,eAAgB,CAAhB;AACD;;AA3BM;AA5Be,CAAX,CAAf","sourcesContent":["import Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'translatable',\n\n  props: {\n    height: Number,\n  },\n\n  data: () => ({\n    elOffsetTop: 0,\n    parallax: 0,\n    parallaxDist: 0,\n    percentScrolled: 0,\n    scrollTop: 0,\n    windowHeight: 0,\n    windowBottom: 0,\n  }),\n\n  computed: {\n    imgHeight (): number {\n      return this.objHeight()\n    },\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('scroll', this.translate, false)\n    window.removeEventListener('resize', this.translate, false)\n  },\n\n  methods: {\n    calcDimensions () {\n      const offset = this.$el.getBoundingClientRect()\n\n      this.scrollTop = window.pageYOffset\n      this.parallaxDist = this.imgHeight - this.height\n      this.elOffsetTop = offset.top + this.scrollTop\n      this.windowHeight = window.innerHeight\n      this.windowBottom = this.scrollTop + this.windowHeight\n    },\n    listeners () {\n      window.addEventListener('scroll', this.translate, false)\n      window.addEventListener('resize', this.translate, false)\n    },\n    /** @abstract **/\n    objHeight (): number {\n      throw new Error('Not implemented !')\n    },\n    translate () {\n      this.calcDimensions()\n\n      this.percentScrolled = (\n        (this.windowBottom - this.elOffsetTop) /\n        (parseInt(this.height) + this.windowHeight)\n      )\n\n      this.parallax = Math.round(this.parallaxDist * this.percentScrolled)\n    },\n  },\n})\n"],"sourceRoot":""}]}