{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\services\\theme\\utils.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\services\\theme\\utils.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { colorToInt, intToHex, colorToHex } from '../../util/colorUtils';\nimport * as sRGB from '../../util/color/transformSRGB';\nimport * as LAB from '../../util/color/transformCIELAB';\nexport function parse(theme, isItem = false) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  const parsedTheme = {};\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    if (value == null) continue;\n\n    if (isItem) {\n      /* istanbul ignore else */\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value);\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true);\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value));\n    }\n  }\n\n  if (!isItem) {\n    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base;\n  }\n\n  return parsedTheme;\n}\n/**\n * Generate the CSS for a base color (.primary)\n */\n\nconst genBaseColor = (name, value) => {\n  return `\n.v-application .${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\n\n\nconst genVariantColor = (name, variant, value) => {\n  const [type, n] = variant.split(/(\\d)/, 2);\n  return `\n.v-application .${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\n\nconst genColorVariableName = (name, variant = 'base') => `--v-${name}-${variant}`;\n\nconst genColorVariable = (name, variant = 'base') => `var(${genColorVariableName(name, variant)})`;\n\nexport function genStyles(theme, cssVar = false) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  if (!colors.length) return '';\n  let variablesCss = '';\n  let css = '';\n  const aColor = cssVar ? genColorVariable('anchor') : anchor;\n  css += `.v-application a { color: ${aColor}; }`;\n  cssVar && (variablesCss += `  ${genColorVariableName('anchor')}: ${anchor};\\n`);\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base);\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`);\n    const variants = Object.keys(value);\n\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i];\n      const variantValue = value[variant];\n      if (variant === 'base') continue;\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue);\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`);\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`;\n  }\n\n  return variablesCss + css;\n}\nexport function genVariations(name, value) {\n  const values = {\n    base: intToHex(value)\n  };\n\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i));\n  }\n\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i));\n  }\n\n  return values;\n}\nexport function lighten(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}",{"version":3,"sources":["../../../src/services/theme/utils.ts"],"names":[],"mappings":"AAAA,SAAA,UAAA,EAAA,QAAA,EAAA,UAAA,QAAA,uBAAA;AACA,OAAO,KAAP,IAAA,MAAA,gCAAA;AACA,OAAO,KAAP,GAAA,MAAA,kCAAA;AAMA,OAAM,SAAA,KAAA,CAAA,KAAA,EAEJ,MAAM,GAFF,KAAA,EAEU;AAEd,QAAM;AAAA,IAAA,MAAA;AAAU,OAAG;AAAb,MAAN,KAAA;AACA,QAAM,MAAM,GAAG,MAAM,CAAN,IAAA,CAAf,OAAe,CAAf;AACA,QAAM,WAAW,GAAjB,EAAA;;AAEA,OAAK,IAAI,CAAC,GAAV,CAAA,EAAgB,CAAC,GAAG,MAAM,CAA1B,MAAA,EAAmC,EAAnC,CAAA,EAAwC;AACtC,UAAM,IAAI,GAAG,MAAM,CAAnB,CAAmB,CAAnB;AACA,UAAM,KAAK,GAAG,KAAK,CAAnB,IAAmB,CAAnB;AAEA,QAAI,KAAK,IAAT,IAAA,EAAmB;;AAEnB,QAAA,MAAA,EAAY;AACV;AACA,UAAI,IAAI,KAAJ,MAAA,IAAmB,IAAI,CAAJ,UAAA,CAAnB,SAAmB,CAAnB,IAAiD,IAAI,CAAJ,UAAA,CAArD,QAAqD,CAArD,EAAgF;AAC9E,QAAA,WAAW,CAAX,IAAW,CAAX,GAAoB,UAAU,CAA9B,KAA8B,CAA9B;AACD;AAJH,KAAA,MAKO,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AACpC,MAAA,WAAW,CAAX,IAAW,CAAX,GAAoB,KAAK,CAAA,KAAA,EAAzB,IAAyB,CAAzB;AADK,KAAA,MAEA;AACL,MAAA,WAAW,CAAX,IAAW,CAAX,GAAoB,aAAa,CAAA,IAAA,EAAO,UAAU,CAAlD,KAAkD,CAAjB,CAAjC;AACD;AACF;;AAED,MAAI,CAAJ,MAAA,EAAa;AACX,IAAA,WAAW,CAAX,MAAA,GAAqB,MAAM,IAAI,WAAW,CAArB,IAAA,IAA8B,WAAW,CAAX,OAAA,CAAnD,IAAA;AACD;;AAED,SAAA,WAAA;AACD;AAED;;;;AAGA,MAAM,YAAY,GAAG,CAAA,IAAA,EAAA,KAAA,KAAwC;AAC3D,SAAO;kBACS,IAAI;sBACA,KAAK;kBACT,KAAK;;kBAEL,IAAI;WACX,KAAK;iBACC,KAAK;EAPpB;AADF,CAAA;AAYA;;;;;AAGA,MAAM,eAAe,GAAG,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,KAAyD;AAC/E,QAAM,CAAA,IAAA,EAAA,CAAA,IAAY,OAAO,CAAP,KAAA,CAAA,MAAA,EAAlB,CAAkB,CAAlB;AACA,SAAO;kBACS,IAAI,IAAI,IAAI,IAAI,CAAC;sBACb,KAAK;kBACT,KAAK;;kBAEL,IAAI,gBAAgB,IAAI,IAAI,CAAC;WACpC,KAAK;iBACC,KAAK;EAPpB;AAFF,CAAA;;AAaA,MAAM,oBAAoB,GAAG,CAAA,IAAA,EAAe,OAAO,GAAtB,MAAA,KAA4C,OAAO,IAAI,IAAI,OAAxF,EAAA;;AAEA,MAAM,gBAAgB,GAAG,CAAA,IAAA,EAAe,OAAO,GAAtB,MAAA,KAA4C,OAAO,oBAAoB,CAAA,IAAA,EAAA,OAAA,CAAhG,GAAA;;AAEA,OAAM,SAAA,SAAA,CAAA,KAAA,EAAgD,MAAM,GAAtD,KAAA,EAA8D;AAClE,QAAM;AAAA,IAAA,MAAA;AAAU,OAAG;AAAb,MAAN,KAAA;AACA,QAAM,MAAM,GAAG,MAAM,CAAN,IAAA,CAAf,OAAe,CAAf;AAEA,MAAI,CAAC,MAAM,CAAX,MAAA,EAAoB,OAAA,EAAA;AAEpB,MAAI,YAAY,GAAhB,EAAA;AACA,MAAI,GAAG,GAAP,EAAA;AAEA,QAAM,MAAM,GAAG,MAAM,GAAG,gBAAgB,CAAnB,QAAmB,CAAnB,GAArB,MAAA;AACA,EAAA,GAAG,IAAI,6BAA6B,MAApC,KAAA;AACA,EAAA,MAAM,KAAK,YAAY,IAAI,KAAK,oBAAoB,CAAA,QAAA,CAAU,KAAK,MAAnE,KAAM,CAAN;;AAEA,OAAK,IAAI,CAAC,GAAV,CAAA,EAAgB,CAAC,GAAG,MAAM,CAA1B,MAAA,EAAmC,EAAnC,CAAA,EAAwC;AACtC,UAAM,IAAI,GAAG,MAAM,CAAnB,CAAmB,CAAnB;AACA,UAAM,KAAK,GAAG,KAAK,CAAnB,IAAmB,CAAnB;AAEA,IAAA,GAAG,IAAI,YAAY,CAAA,IAAA,EAAO,MAAM,GAAG,gBAAgB,CAAnB,IAAmB,CAAnB,GAA4B,KAAK,CAAjE,IAAmB,CAAnB;AACA,IAAA,MAAM,KAAK,YAAY,IAAI,KAAK,oBAAoB,CAAA,IAAA,CAAM,KAAK,KAAK,CAAC,IAArE,KAAM,CAAN;AAEA,UAAM,QAAQ,GAAG,MAAM,CAAN,IAAA,CAAjB,KAAiB,CAAjB;;AACA,SAAK,IAAI,CAAC,GAAV,CAAA,EAAgB,CAAC,GAAG,QAAQ,CAA5B,MAAA,EAAqC,EAArC,CAAA,EAA0C;AACxC,YAAM,OAAO,GAAG,QAAQ,CAAxB,CAAwB,CAAxB;AACA,YAAM,YAAY,GAAG,KAAK,CAA1B,OAA0B,CAA1B;AACA,UAAI,OAAO,KAAX,MAAA,EAAwB;AAExB,MAAA,GAAG,IAAI,eAAe,CAAA,IAAA,EAAA,OAAA,EAAgB,MAAM,GAAG,gBAAgB,CAAA,IAAA,EAAnB,OAAmB,CAAnB,GAA5C,YAAsB,CAAtB;AACA,MAAA,MAAM,KAAK,YAAY,IAAI,KAAK,oBAAoB,CAAA,IAAA,EAAA,OAAA,CAAe,KAAK,YAAxE,KAAM,CAAN;AACD;AACF;;AAED,MAAA,MAAA,EAAY;AACV,IAAA,YAAY,GAAG,YAAY,YAA3B,OAAA;AACD;;AAED,SAAO,YAAY,GAAnB,GAAA;AACD;AAED,OAAM,SAAA,aAAA,CAAA,IAAA,EAAA,KAAA,EAAsD;AAC1D,QAAM,MAAM,GAA2B;AACrC,IAAA,IAAI,EAAE,QAAQ,CAAA,KAAA;AADuB,GAAvC;;AAIA,OAAK,IAAI,CAAC,GAAV,CAAA,EAAgB,CAAC,GAAjB,CAAA,EAAuB,EAAvB,CAAA,EAA4B;AAC1B,IAAA,MAAM,CAAC,UAAU,CAAjB,EAAM,CAAN,GAAwB,QAAQ,CAAC,OAAO,CAAA,KAAA,EAAxC,CAAwC,CAAR,CAAhC;AACD;;AAED,OAAK,IAAI,CAAC,GAAV,CAAA,EAAgB,CAAC,IAAjB,CAAA,EAAwB,EAAxB,CAAA,EAA6B;AAC3B,IAAA,MAAM,CAAC,SAAS,CAAhB,EAAM,CAAN,GAAuB,QAAQ,CAAC,MAAM,CAAA,KAAA,EAAtC,CAAsC,CAAP,CAA/B;AACD;;AAED,SAAA,MAAA;AACD;AAED,OAAM,SAAA,OAAA,CAAA,KAAA,EAAA,MAAA,EAAkD;AACtD,QAAM,GAAG,GAAG,GAAG,CAAH,OAAA,CAAY,IAAI,CAAJ,KAAA,CAAxB,KAAwB,CAAZ,CAAZ;AACA,EAAA,GAAG,CAAH,CAAG,CAAH,GAAS,GAAG,CAAH,CAAG,CAAH,GAAS,MAAM,GAAxB,EAAA;AACA,SAAO,IAAI,CAAJ,OAAA,CAAa,GAAG,CAAH,KAAA,CAApB,GAAoB,CAAb,CAAP;AACD;AAED,OAAM,SAAA,MAAA,CAAA,KAAA,EAAA,MAAA,EAAiD;AACrD,QAAM,GAAG,GAAG,GAAG,CAAH,OAAA,CAAY,IAAI,CAAJ,KAAA,CAAxB,KAAwB,CAAZ,CAAZ;AACA,EAAA,GAAG,CAAH,CAAG,CAAH,GAAS,GAAG,CAAH,CAAG,CAAH,GAAS,MAAM,GAAxB,EAAA;AACA,SAAO,IAAI,CAAJ,OAAA,CAAa,GAAG,CAAH,KAAA,CAApB,GAAoB,CAAb,CAAP;AACD","sourcesContent":["import { colorToInt, intToHex, colorToHex, ColorInt } from '../../util/colorUtils'\nimport * as sRGB from '../../util/color/transformSRGB'\nimport * as LAB from '../../util/color/transformCIELAB'\nimport {\n  VuetifyParsedTheme,\n  VuetifyThemeItem,\n} from 'vuetify/types/services/theme'\n\nexport function parse (\n  theme: Record<string, VuetifyThemeItem>,\n  isItem = false\n): VuetifyParsedTheme {\n  const { anchor, ...variant } = theme\n  const colors = Object.keys(variant)\n  const parsedTheme: any = {}\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    if (value == null) continue\n\n    if (isItem) {\n      /* istanbul ignore else */\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value)\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true)\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value))\n    }\n  }\n\n  if (!isItem) {\n    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base\n  }\n\n  return parsedTheme\n}\n\n/**\n * Generate the CSS for a base color (.primary)\n */\nconst genBaseColor = (name: string, value: string): string => {\n  return `\n.v-application .${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`\n}\n\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\nconst genVariantColor = (name: string, variant: string, value: string): string => {\n  const [type, n] = variant.split(/(\\d)/, 2)\n  return `\n.v-application .${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`\n}\n\nconst genColorVariableName = (name: string, variant = 'base'): string => `--v-${name}-${variant}`\n\nconst genColorVariable = (name: string, variant = 'base'): string => `var(${genColorVariableName(name, variant)})`\n\nexport function genStyles (theme: VuetifyParsedTheme, cssVar = false): string {\n  const { anchor, ...variant } = theme\n  const colors = Object.keys(variant)\n\n  if (!colors.length) return ''\n\n  let variablesCss = ''\n  let css = ''\n\n  const aColor = cssVar ? genColorVariable('anchor') : anchor\n  css += `.v-application a { color: ${aColor}; }`\n  cssVar && (variablesCss += `  ${genColorVariableName('anchor')}: ${anchor};\\n`)\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base)\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`)\n\n    const variants = Object.keys(value)\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i]\n      const variantValue = value[variant]\n      if (variant === 'base') continue\n\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue)\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`)\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`\n  }\n\n  return variablesCss + css\n}\n\nexport function genVariations (name: string, value: ColorInt): Record<string, string> {\n  const values: Record<string, string> = {\n    base: intToHex(value),\n  }\n\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i))\n  }\n\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i))\n  }\n\n  return values\n}\n\nexport function lighten (value: ColorInt, amount: number): ColorInt {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] + amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n\nexport function darken (value: ColorInt, amount: number): ColorInt {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n"],"sourceRoot":""}]}