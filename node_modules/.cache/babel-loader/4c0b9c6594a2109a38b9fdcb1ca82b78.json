{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\mixins\\binds-attrs\\index.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\mixins\\binds-attrs\\index.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\n/**\n * This mixin provides `attrs$` and `listeners$` to work around\n * vue bug https://github.com/vuejs/vue/issues/10115\n */\n\nfunction makeWatcher(property) {\n  return function (val, oldVal) {\n    for (const attr in oldVal) {\n      if (!Object.prototype.hasOwnProperty.call(val, attr)) {\n        this.$delete(this.$data[property], attr);\n      }\n    }\n\n    for (const attr in val) {\n      this.$set(this.$data[property], attr, val[attr]);\n    }\n  };\n}\n\nexport default Vue.extend({\n  data: () => ({\n    attrs$: {},\n    listeners$: {}\n  }),\n\n  created() {\n    // Work around unwanted re-renders: https://github.com/vuejs/vue/issues/10115\n    // Make sure to use `attrs$` instead of `$attrs` (confusing right?)\n    this.$watch('$attrs', makeWatcher('attrs$'), {\n      immediate: true\n    });\n    this.$watch('$listeners', makeWatcher('listeners$'), {\n      immediate: true\n    });\n  }\n\n});",{"version":3,"sources":["../../../src/mixins/binds-attrs/index.ts"],"names":[],"mappings":"AAAA,OAAA,GAAA,MAAA,KAAA;AAEA;;;;;AAKA,SAAA,WAAA,CAAA,QAAA,EAAsC;AACpC,SAAO,UAAA,GAAA,EAAA,MAAA,EAAgC;AACrC,SAAK,MAAL,IAAA,IAAA,MAAA,EAA2B;AACzB,UAAI,CAAC,MAAM,CAAN,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,GAAA,EAAL,IAAK,CAAL,EAAsD;AACpD,aAAA,OAAA,CAAa,KAAA,KAAA,CAAb,QAAa,CAAb,EAAA,IAAA;AACD;AACF;;AACD,SAAK,MAAL,IAAA,IAAA,GAAA,EAAwB;AACtB,WAAA,IAAA,CAAU,KAAA,KAAA,CAAV,QAAU,CAAV,EAAA,IAAA,EAAsC,GAAG,CAAzC,IAAyC,CAAzC;AACD;AARH,GAAA;AAUD;;AAED,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EAAE,OAAO;AACX,IAAA,MAAM,EADK,EAAA;AAEX,IAAA,UAAU,EAAE;AAFD,GAAP,CADkB;;AAMxB,EAAA,OAAO,GAAA;AACL;AACA;AACA,SAAA,MAAA,CAAA,QAAA,EAAsB,WAAW,CAAjC,QAAiC,CAAjC,EAA6C;AAAE,MAAA,SAAS,EAAE;AAAb,KAA7C;AACA,SAAA,MAAA,CAAA,YAAA,EAA0B,WAAW,CAArC,YAAqC,CAArC,EAAqD;AAAE,MAAA,SAAS,EAAE;AAAb,KAArD;AACD;;AAXuB,CAAX,CAAf","sourcesContent":["import Vue, { WatchHandler } from 'vue'\n\n/**\n * This mixin provides `attrs$` and `listeners$` to work around\n * vue bug https://github.com/vuejs/vue/issues/10115\n */\n\nfunction makeWatcher (property: string): ThisType<Vue> & WatchHandler<any> {\n  return function (this: Vue, val, oldVal) {\n    for (const attr in oldVal) {\n      if (!Object.prototype.hasOwnProperty.call(val, attr)) {\n        this.$delete(this.$data[property], attr)\n      }\n    }\n    for (const attr in val) {\n      this.$set(this.$data[property], attr, val[attr])\n    }\n  }\n}\n\nexport default Vue.extend({\n  data: () => ({\n    attrs$: {} as Dictionary<string>,\n    listeners$: {} as Dictionary<Function | Function[]>,\n  }),\n\n  created () {\n    // Work around unwanted re-renders: https://github.com/vuejs/vue/issues/10115\n    // Make sure to use `attrs$` instead of `$attrs` (confusing right?)\n    this.$watch('$attrs', makeWatcher('attrs$'), { immediate: true })\n    this.$watch('$listeners', makeWatcher('listeners$'), { immediate: true })\n  },\n})\n"],"sourceRoot":""}]}