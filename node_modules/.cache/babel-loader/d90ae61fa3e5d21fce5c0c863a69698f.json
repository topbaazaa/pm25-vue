{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VOverflowBtn\\VOverflowBtn.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VOverflowBtn\\VOverflowBtn.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VOverflowBtn/VOverflowBtn.sass\"; // Extensions\n\nimport VSelect from '../VSelect/VSelect';\nimport VAutocomplete from '../VAutocomplete';\nimport VTextField from '../VTextField/VTextField'; // Components\n\nimport VBtn from '../VBtn'; // Utilities\n\nimport { consoleWarn } from '../../util/console';\n/* @vue/component */\n\nexport default VAutocomplete.extend({\n  name: 'v-overflow-btn',\n  props: {\n    editable: Boolean,\n    segmented: Boolean\n  },\n  computed: {\n    classes() {\n      return { ...VAutocomplete.options.computed.classes.call(this),\n        'v-overflow-btn': true,\n        'v-overflow-btn--segmented': this.segmented,\n        'v-overflow-btn--editable': this.editable\n      };\n    },\n\n    isAnyValueAllowed() {\n      return this.editable || VAutocomplete.options.computed.isAnyValueAllowed.call(this);\n    },\n\n    isSingle() {\n      return true;\n    },\n\n    computedItems() {\n      return this.segmented ? this.allItems : this.filteredItems;\n    }\n\n  },\n  methods: {\n    genSelections() {\n      return this.editable ? VAutocomplete.options.methods.genSelections.call(this) : VSelect.options.methods.genSelections.call(this); // Override v-autocomplete's override\n    },\n\n    genCommaSelection(item, index, last) {\n      return this.segmented ? this.genSegmentedBtn(item) : VSelect.options.methods.genCommaSelection.call(this, item, index, last);\n    },\n\n    genInput() {\n      const input = VTextField.options.methods.genInput.call(this);\n      input.data = input.data || {};\n      input.data.domProps.value = this.editable ? this.internalSearch : '';\n      input.data.attrs.readonly = !this.isAnyValueAllowed;\n      return input;\n    },\n\n    genLabel() {\n      if (this.editable && this.isFocused) return null;\n      const label = VTextField.options.methods.genLabel.call(this);\n      if (!label) return label;\n      label.data = label.data || {}; // Reset previously set styles from parent\n\n      label.data.style = {};\n      return label;\n    },\n\n    genSegmentedBtn(item) {\n      const itemValue = this.getValue(item);\n      const itemObj = this.computedItems.find(i => this.getValue(i) === itemValue) || item;\n\n      if (!itemObj.text || !itemObj.callback) {\n        consoleWarn('When using \\'segmented\\' prop without a selection slot, items must contain both a text and callback property', this);\n        return null;\n      }\n\n      return this.$createElement(VBtn, {\n        props: {\n          text: true\n        },\n        on: {\n          click(e) {\n            e.stopPropagation();\n            itemObj.callback(e);\n          }\n\n        }\n      }, [itemObj.text]);\n    }\n\n  }\n});",{"version":3,"sources":["../../../src/components/VOverflowBtn/VOverflowBtn.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport './VOverflowBtn.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete'\nimport VTextField from '../VTextField/VTextField'\n\n// Components\nimport VBtn from '../VBtn'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-overflow-btn',\n\n  props: {\n    editable: Boolean,\n    segmented: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VAutocomplete.options.computed.classes.call(this),\n        'v-overflow-btn': true,\n        'v-overflow-btn--segmented': this.segmented,\n        'v-overflow-btn--editable': this.editable,\n      }\n    },\n    isAnyValueAllowed (): boolean {\n      return this.editable ||\n        VAutocomplete.options.computed.isAnyValueAllowed.call(this)\n    },\n    isSingle (): true {\n      return true\n    },\n    computedItems (): object[] {\n      return this.segmented ? this.allItems : this.filteredItems\n    },\n  },\n\n  methods: {\n    genSelections () {\n      return this.editable\n        ? VAutocomplete.options.methods.genSelections.call(this)\n        : VSelect.options.methods.genSelections.call(this) // Override v-autocomplete's override\n    },\n    genCommaSelection (item: any, index: number, last: boolean) {\n      return this.segmented\n        ? this.genSegmentedBtn(item)\n        : VSelect.options.methods.genCommaSelection.call(this, item, index, last)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = input.data || {}\n      input.data.domProps!.value = this.editable ? this.internalSearch : ''\n      input.data.attrs!.readonly = !this.isAnyValueAllowed\n\n      return input\n    },\n    genLabel () {\n      if (this.editable && this.isFocused) return null\n\n      const label = VTextField.options.methods.genLabel.call(this)\n\n      if (!label) return label\n\n      label.data = label.data || {}\n\n      // Reset previously set styles from parent\n      label.data.style = {}\n\n      return label\n    },\n    genSegmentedBtn (item: any) {\n      const itemValue = this.getValue(item)\n      const itemObj = this.computedItems.find(i => this.getValue(i) === itemValue) || item\n\n      if (!itemObj.text || !itemObj.callback) {\n        consoleWarn('When using \\'segmented\\' prop without a selection slot, items must contain both a text and callback property', this)\n        return null\n      }\n\n      return this.$createElement(VBtn, {\n        props: { text: true },\n        on: {\n          click (e: Event) {\n            e.stopPropagation()\n            itemObj.callback(e)\n          },\n        },\n      }, [itemObj.text])\n    },\n  },\n})\n"],"sourceRoot":""}]}