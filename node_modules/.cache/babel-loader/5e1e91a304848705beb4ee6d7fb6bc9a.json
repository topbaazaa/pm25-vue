{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VTooltip\\VTooltip.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\components\\VTooltip\\VTooltip.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"../../../src/components/VTooltip/VTooltip.sass\"; // Mixins\n\nimport Activatable from '../../mixins/activatable';\nimport Colorable from '../../mixins/colorable';\nimport Delayable from '../../mixins/delayable';\nimport Dependent from '../../mixins/dependent';\nimport Detachable from '../../mixins/detachable';\nimport Menuable from '../../mixins/menuable';\nimport Toggleable from '../../mixins/toggleable'; // Helpers\n\nimport { convertToUnit, keyCodes, getSlotType } from '../../util/helpers';\nimport { consoleError } from '../../util/console';\nimport mixins from '../../util/mixins';\n/* @vue/component */\n\nexport default mixins(Colorable, Delayable, Dependent, Detachable, Menuable, Toggleable).extend({\n  name: 'v-tooltip',\n  props: {\n    closeDelay: {\n      type: [Number, String],\n      default: 0\n    },\n    disabled: Boolean,\n    fixed: {\n      type: Boolean,\n      default: true\n    },\n    openDelay: {\n      type: [Number, String],\n      default: 0\n    },\n    openOnHover: {\n      type: Boolean,\n      default: true\n    },\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    transition: String,\n    zIndex: {\n      default: null\n    }\n  },\n  data: () => ({\n    calculatedMinWidth: 0,\n    closeDependents: false\n  }),\n  computed: {\n    calculatedLeft() {\n      const {\n        activator,\n        content\n      } = this.dimensions;\n      const unknown = !this.bottom && !this.left && !this.top && !this.right;\n      const activatorLeft = this.attach !== false ? activator.offsetLeft : activator.left;\n      let left = 0;\n\n      if (this.top || this.bottom || unknown) {\n        left = activatorLeft + activator.width / 2 - content.width / 2;\n      } else if (this.left || this.right) {\n        left = activatorLeft + (this.right ? activator.width : -content.width) + (this.right ? 10 : -10);\n      }\n\n      if (this.nudgeLeft) left -= parseInt(this.nudgeLeft);\n      if (this.nudgeRight) left += parseInt(this.nudgeRight);\n      return `${this.calcXOverflow(left, this.dimensions.content.width)}px`;\n    },\n\n    calculatedTop() {\n      const {\n        activator,\n        content\n      } = this.dimensions;\n      const activatorTop = this.attach !== false ? activator.offsetTop : activator.top;\n      let top = 0;\n\n      if (this.top || this.bottom) {\n        top = activatorTop + (this.bottom ? activator.height : -content.height) + (this.bottom ? 10 : -10);\n      } else if (this.left || this.right) {\n        top = activatorTop + activator.height / 2 - content.height / 2;\n      }\n\n      if (this.nudgeTop) top -= parseInt(this.nudgeTop);\n      if (this.nudgeBottom) top += parseInt(this.nudgeBottom);\n      return `${this.calcYOverflow(top + this.pageYOffset)}px`;\n    },\n\n    classes() {\n      return {\n        'v-tooltip--top': this.top,\n        'v-tooltip--right': this.right,\n        'v-tooltip--bottom': this.bottom,\n        'v-tooltip--left': this.left,\n        'v-tooltip--attached': this.attach === '' || this.attach === true || this.attach === 'attach'\n      };\n    },\n\n    computedTransition() {\n      if (this.transition) return this.transition;\n      return this.isActive ? 'scale-transition' : 'fade-transition';\n    },\n\n    offsetY() {\n      return this.top || this.bottom;\n    },\n\n    offsetX() {\n      return this.left || this.right;\n    },\n\n    styles() {\n      return {\n        left: this.calculatedLeft,\n        maxWidth: convertToUnit(this.maxWidth),\n        minWidth: convertToUnit(this.minWidth),\n        opacity: this.isActive ? 0.9 : 0,\n        top: this.calculatedTop,\n        zIndex: this.zIndex || this.activeZIndex\n      };\n    }\n\n  },\n\n  beforeMount() {\n    this.$nextTick(() => {\n      this.value && this.callActivate();\n    });\n  },\n\n  mounted() {\n    if (getSlotType(this, 'activator', true) === 'v-slot') {\n      consoleError(`v-tooltip's activator slot must be bound, try '<template #activator=\"data\"><v-btn v-on=\"data.on>'`, this);\n    }\n  },\n\n  methods: {\n    activate() {\n      // Update coordinates and dimensions of menu\n      // and its activator\n      this.updateDimensions(); // Start the transition\n\n      requestAnimationFrame(this.startTransition);\n    },\n\n    deactivate() {\n      this.runDelay('close');\n    },\n\n    genActivatorListeners() {\n      const listeners = Activatable.options.methods.genActivatorListeners.call(this);\n\n      listeners.focus = e => {\n        this.getActivator(e);\n        this.runDelay('open');\n      };\n\n      listeners.blur = e => {\n        this.getActivator(e);\n        this.runDelay('close');\n      };\n\n      listeners.keydown = e => {\n        if (e.keyCode === keyCodes.esc) {\n          this.getActivator(e);\n          this.runDelay('close');\n        }\n      };\n\n      return listeners;\n    }\n\n  },\n\n  render(h) {\n    const tooltip = h('div', this.setBackgroundColor(this.color, {\n      staticClass: 'v-tooltip__content',\n      class: {\n        [this.contentClass]: true,\n        menuable__content__active: this.isActive,\n        'v-tooltip__content--fixed': this.activatorFixed\n      },\n      style: this.styles,\n      attrs: this.getScopeIdAttrs(),\n      directives: [{\n        name: 'show',\n        value: this.isContentActive\n      }],\n      ref: 'content'\n    }), this.showLazyContent(this.getContentSlot()));\n    return h(this.tag, {\n      staticClass: 'v-tooltip',\n      class: this.classes\n    }, [h('transition', {\n      props: {\n        name: this.computedTransition\n      }\n    }, [tooltip]), this.genActivator()]);\n  }\n\n});",{"version":3,"sources":["../../../src/components/VTooltip/VTooltip.ts"],"names":[],"mappings":"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","sourcesContent":["import './VTooltip.sass'\n\n// Mixins\nimport Activatable from '../../mixins/activatable'\nimport Colorable from '../../mixins/colorable'\nimport Delayable from '../../mixins/delayable'\nimport Dependent from '../../mixins/dependent'\nimport Detachable from '../../mixins/detachable'\nimport Menuable from '../../mixins/menuable'\nimport Toggleable from '../../mixins/toggleable'\n\n// Helpers\nimport { convertToUnit, keyCodes, getSlotType } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\n\n// Types\nimport { VNode } from 'vue'\nimport mixins from '../../util/mixins'\n\n/* @vue/component */\nexport default mixins(Colorable, Delayable, Dependent, Detachable, Menuable, Toggleable).extend({\n  name: 'v-tooltip',\n\n  props: {\n    closeDelay: {\n      type: [Number, String],\n      default: 0,\n    },\n    disabled: Boolean,\n    fixed: {\n      type: Boolean,\n      default: true,\n    },\n    openDelay: {\n      type: [Number, String],\n      default: 0,\n    },\n    openOnHover: {\n      type: Boolean,\n      default: true,\n    },\n    tag: {\n      type: String,\n      default: 'span',\n    },\n    transition: String,\n    zIndex: {\n      default: null,\n    },\n  },\n\n  data: () => ({\n    calculatedMinWidth: 0,\n    closeDependents: false,\n  }),\n\n  computed: {\n    calculatedLeft (): string {\n      const { activator, content } = this.dimensions\n      const unknown = !this.bottom && !this.left && !this.top && !this.right\n      const activatorLeft = this.attach !== false ? activator.offsetLeft : activator.left\n      let left = 0\n\n      if (this.top || this.bottom || unknown) {\n        left = (\n          activatorLeft +\n          (activator.width / 2) -\n          (content.width / 2)\n        )\n      } else if (this.left || this.right) {\n        left = (\n          activatorLeft +\n          (this.right ? activator.width : -content.width) +\n          (this.right ? 10 : -10)\n        )\n      }\n\n      if (this.nudgeLeft) left -= parseInt(this.nudgeLeft)\n      if (this.nudgeRight) left += parseInt(this.nudgeRight)\n\n      return `${this.calcXOverflow(left, this.dimensions.content.width)}px`\n    },\n    calculatedTop (): string {\n      const { activator, content } = this.dimensions\n      const activatorTop = this.attach !== false ? activator.offsetTop : activator.top\n      let top = 0\n\n      if (this.top || this.bottom) {\n        top = (\n          activatorTop +\n          (this.bottom ? activator.height : -content.height) +\n          (this.bottom ? 10 : -10)\n        )\n      } else if (this.left || this.right) {\n        top = (\n          activatorTop +\n          (activator.height / 2) -\n          (content.height / 2)\n        )\n      }\n\n      if (this.nudgeTop) top -= parseInt(this.nudgeTop)\n      if (this.nudgeBottom) top += parseInt(this.nudgeBottom)\n\n      return `${this.calcYOverflow(top + this.pageYOffset)}px`\n    },\n    classes (): object {\n      return {\n        'v-tooltip--top': this.top,\n        'v-tooltip--right': this.right,\n        'v-tooltip--bottom': this.bottom,\n        'v-tooltip--left': this.left,\n        'v-tooltip--attached':\n          this.attach === '' ||\n          this.attach === true ||\n          this.attach === 'attach',\n      }\n    },\n    computedTransition (): string {\n      if (this.transition) return this.transition\n\n      return this.isActive ? 'scale-transition' : 'fade-transition'\n    },\n    offsetY (): boolean {\n      return this.top || this.bottom\n    },\n    offsetX (): boolean {\n      return this.left || this.right\n    },\n    styles (): object {\n      return {\n        left: this.calculatedLeft,\n        maxWidth: convertToUnit(this.maxWidth),\n        minWidth: convertToUnit(this.minWidth),\n        opacity: this.isActive ? 0.9 : 0,\n        top: this.calculatedTop,\n        zIndex: this.zIndex || this.activeZIndex,\n      }\n    },\n  },\n\n  beforeMount () {\n    this.$nextTick(() => {\n      this.value && this.callActivate()\n    })\n  },\n\n  mounted () {\n    if (getSlotType(this, 'activator', true) === 'v-slot') {\n      consoleError(`v-tooltip's activator slot must be bound, try '<template #activator=\"data\"><v-btn v-on=\"data.on>'`, this)\n    }\n  },\n\n  methods: {\n    activate () {\n      // Update coordinates and dimensions of menu\n      // and its activator\n      this.updateDimensions()\n      // Start the transition\n      requestAnimationFrame(this.startTransition)\n    },\n    deactivate () {\n      this.runDelay('close')\n    },\n    genActivatorListeners () {\n      const listeners = Activatable.options.methods.genActivatorListeners.call(this)\n\n      listeners.focus = (e: Event) => {\n        this.getActivator(e)\n        this.runDelay('open')\n      }\n      listeners.blur = (e: Event) => {\n        this.getActivator(e)\n        this.runDelay('close')\n      }\n      listeners.keydown = (e: KeyboardEvent) => {\n        if (e.keyCode === keyCodes.esc) {\n          this.getActivator(e)\n          this.runDelay('close')\n        }\n      }\n\n      return listeners\n    },\n  },\n\n  render (h): VNode {\n    const tooltip = h('div', this.setBackgroundColor(this.color, {\n      staticClass: 'v-tooltip__content',\n      class: {\n        [this.contentClass]: true,\n        menuable__content__active: this.isActive,\n        'v-tooltip__content--fixed': this.activatorFixed,\n      },\n      style: this.styles,\n      attrs: this.getScopeIdAttrs(),\n      directives: [{\n        name: 'show',\n        value: this.isContentActive,\n      }],\n      ref: 'content',\n    }), this.showLazyContent(this.getContentSlot()))\n\n    return h(this.tag, {\n      staticClass: 'v-tooltip',\n      class: this.classes,\n    }, [\n      h('transition', {\n        props: {\n          name: this.computedTransition,\n        },\n      }, [tooltip]),\n      this.genActivator(),\n    ])\n  },\n})\n"],"sourceRoot":""}]}