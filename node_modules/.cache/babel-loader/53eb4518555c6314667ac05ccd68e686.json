{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\directives\\click-outside\\index.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\directives\\click-outside\\index.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function closeConditional() {\n  return false;\n}\n\nfunction directive(e, el, binding) {\n  // Args may not always be supplied\n  binding.args = binding.args || {}; // If no closeConditional was supplied assign a default\n\n  const isActive = binding.args.closeConditional || closeConditional; // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n\n  if (!e || isActive(e) === false) return; // If click was triggered programmaticaly (domEl.click()) then\n  // it shouldn't be treated as click-outside\n  // Chrome/Firefox support isTrusted property\n  // IE/Edge support pointerType property (empty if not triggered\n  // by pointing device)\n\n  if ('isTrusted' in e && !e.isTrusted || 'pointerType' in e && !e.pointerType) return; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  const elements = (binding.args.include || (() => []))(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  !elements.some(el => el.contains(e.target)) && setTimeout(() => {\n    isActive(e) && binding.value && binding.value(e);\n  }, 0);\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted(el, binding) {\n    const onClick = e => directive(e, el, binding); // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n\n\n    const app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app.addEventListener('click', onClick, true);\n    el._clickOutside = onClick;\n  },\n\n  unbind(el) {\n    if (!el._clickOutside) return;\n    const app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app && app.removeEventListener('click', el._clickOutside, true);\n    delete el._clickOutside;\n  }\n\n};\nexport default ClickOutside;",{"version":3,"sources":["../../../src/directives/click-outside/index.ts"],"names":[],"mappings":"AAYA,SAAA,gBAAA,GAAyB;AACvB,SAAA,KAAA;AACD;;AAED,SAAA,SAAA,CAAA,CAAA,EAAA,EAAA,EAAA,OAAA,EAAoF;AAClF;AACA,EAAA,OAAO,CAAP,IAAA,GAAe,OAAO,CAAP,IAAA,IAFmE,EAElF,CAFkF,CAIlF;;AACA,QAAM,QAAQ,GAAI,OAAO,CAAP,IAAA,CAAA,gBAAA,IALgE,gBAKlF,CALkF,CAOlF;AACA;AACA;AACA;;AACA,MAAI,CAAA,CAAA,IAAM,QAAQ,CAAR,CAAQ,CAAR,KAAV,KAAA,EAXkF,OAAA,CAalF;AACA;AACA;AACA;AACA;;AACA,MAAK,eAAA,CAAA,IAAoB,CAAC,CAAC,CAAvB,SAAC,IACF,iBAAA,CAAA,IAAsB,CAAC,CAAC,CAD3B,WAAA,EAlBkF,OAAA,CAsBlF;AACA;;AACA,QAAM,QAAQ,GAAG,CAAC,OAAO,CAAP,IAAA,CAAA,OAAA,KAAyB,MAxBuC,EAwBhE,CAAD,GAAjB,CAxBkF,CAyBlF;;;AACA,EAAA,QAAQ,CAAR,IAAA,CA1BkF,EA0BlF,EA1BkF,CA4BlF;AACA;AACA;AACA;AACA;;AACA,GAAC,QAAQ,CAAR,IAAA,CAAc,EAAE,IAAI,EAAE,CAAF,QAAA,CAAY,CAAC,CAAlC,MAAqB,CAApB,CAAD,IAAuD,UAAU,CAAC,MAAK;AACrE,IAAA,QAAQ,CAAR,CAAQ,CAAR,IAAe,OAAO,CAAtB,KAAA,IAAgC,OAAO,CAAP,KAAA,CAAhC,CAAgC,CAAhC;AAD+D,GAAA,EAAjE,CAAiE,CAAjE;AAGD;;AAED,OAAO,MAAM,YAAY,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA,EAAA,QAAQ,CAAA,EAAA,EAAA,OAAA,EAAiD;AACvD,UAAM,OAAO,GAAI,CAAD,IAAc,SAAS,CAAA,CAAA,EAAA,EAAA,EADgB,OAChB,CAAvC,CADuD,CAEvD;AACA;AACA;;;AACA,UAAM,GAAG,GAAG,QAAQ,CAAR,aAAA,CAAA,YAAA,KACV,QAAQ,CAN6C,IAKvD,CALuD,CAMvC;;AAChB,IAAA,GAAG,CAAH,gBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,IAAA;AACA,IAAA,EAAE,CAAF,aAAA,GAAA,OAAA;AAdwB,GAAA;;AAiB1B,EAAA,MAAM,CAAA,EAAA,EAAiB;AACrB,QAAI,CAAC,EAAE,CAAP,aAAA,EAAuB;AAEvB,UAAM,GAAG,GAAG,QAAQ,CAAR,aAAA,CAAA,YAAA,KACV,QAAQ,CAJW,IAGrB,CAHqB,CAIL;;AAChB,IAAA,GAAG,IAAI,GAAG,CAAH,mBAAA,CAAA,OAAA,EAAiC,EAAE,CAAnC,aAAA,EAAP,IAAO,CAAP;AACA,WAAO,EAAE,CAAT,aAAA;AACD;;AAxByB,CAArB;AA2BP,eAAA,YAAA","sourcesContent":["import { VNodeDirective } from 'vue/types/vnode'\n\ninterface ClickOutsideBindingArgs {\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirective extends VNodeDirective {\n  value?: (e: Event) => void\n  args?: ClickOutsideBindingArgs\n}\n\nfunction closeConditional () {\n  return false\n}\n\nfunction directive (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective): void {\n  // Args may not always be supplied\n  binding.args = binding.args || {}\n\n  // If no closeConditional was supplied assign a default\n  const isActive = (binding.args.closeConditional || closeConditional)\n\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || isActive(e) === false) return\n\n  // If click was triggered programmaticaly (domEl.click()) then\n  // it shouldn't be treated as click-outside\n  // Chrome/Firefox support isTrusted property\n  // IE/Edge support pointerType property (empty if not triggered\n  // by pointing device)\n  if (('isTrusted' in e && !e.isTrusted) ||\n    ('pointerType' in e && !e.pointerType)\n  ) return\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = (binding.args.include || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  !elements.some(el => el.contains(e.target as Node)) && setTimeout(() => {\n    isActive(e) && binding.value && binding.value(e)\n  }, 0)\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted (el: HTMLElement, binding: ClickOutsideDirective) {\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding)\n    // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app.addEventListener('click', onClick, true)\n    el._clickOutside = onClick\n  },\n\n  unbind (el: HTMLElement) {\n    if (!el._clickOutside) return\n\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app && app.removeEventListener('click', el._clickOutside, true)\n    delete el._clickOutside\n  },\n}\n\nexport default ClickOutside\n"],"sourceRoot":""}]}