{"remainingRequest":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\mixins\\bootable\\index.js","dependencies":[{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\vuetify\\lib\\mixins\\bootable\\index.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Acer\\Desktop\\pmm\\pm25-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Utilities\nimport { removed } from '../../util/console'; // Types\n\nimport Vue from 'vue';\n/**\n * Bootable\n * @mixin\n *\n * Used to add lazy content functionality to components\n * Looks for change in \"isActive\" to automatically boot\n * Otherwise can be set manually\n */\n\n/* @vue/component */\n\nexport default Vue.extend().extend({\n  name: 'bootable',\n  props: {\n    eager: Boolean\n  },\n  data: () => ({\n    isBooted: false\n  }),\n  computed: {\n    hasContent() {\n      return this.isBooted || this.eager || this.isActive;\n    }\n\n  },\n  watch: {\n    isActive() {\n      this.isBooted = true;\n    }\n\n  },\n\n  created() {\n    /* istanbul ignore next */\n    if ('lazy' in this.$attrs) {\n      removed('lazy', this);\n    }\n  },\n\n  methods: {\n    showLazyContent(content) {\n      return this.hasContent ? content : undefined;\n    }\n\n  }\n});",{"version":3,"sources":["../../../src/mixins/bootable/index.ts"],"names":[],"mappings":"AAAA;AACA,SAAA,OAAA,QAAA,oBAAA,C,CAEA;;AACA,OAAA,GAAA,MAAA,KAAA;AAKA;;;;;;;;;AAQA;;AACA,eAAe,GAAG,CAAH,MAAA,GAAA,MAAA,CAAsC;AACnD,EAAA,IAAI,EAD+C,UAAA;AAGnD,EAAA,KAAK,EAAE;AACL,IAAA,KAAK,EAAE;AADF,GAH4C;AAOnD,EAAA,IAAI,EAAE,OAAO;AACX,IAAA,QAAQ,EAAE;AADC,GAAP,CAP6C;AAWnD,EAAA,QAAQ,EAAE;AACR,IAAA,UAAU,GAAA;AACR,aAAO,KAAA,QAAA,IAAiB,KAAjB,KAAA,IAA+B,KAAtC,QAAA;AACD;;AAHO,GAXyC;AAiBnD,EAAA,KAAK,EAAE;AACL,IAAA,QAAQ,GAAA;AACN,WAAA,QAAA,GAAA,IAAA;AACD;;AAHI,GAjB4C;;AAuBnD,EAAA,OAAO,GAAA;AACL;AACA,QAAI,UAAU,KAAd,MAAA,EAA2B;AACzB,MAAA,OAAO,CAAA,MAAA,EAAP,IAAO,CAAP;AACD;AA3BgD,GAAA;;AA8BnD,EAAA,OAAO,EAAE;AACP,IAAA,eAAe,CAAA,OAAA,EAAmB;AAChC,aAAO,KAAA,UAAA,GAAA,OAAA,GAAP,SAAA;AACD;;AAHM;AA9B0C,CAAtC,CAAf","sourcesContent":["// Utilities\nimport { removed } from '../../util/console'\n\n// Types\nimport Vue, { VNode } from 'vue'\ninterface Toggleable extends Vue {\n  isActive?: boolean\n}\n\n/**\n * Bootable\n * @mixin\n *\n * Used to add lazy content functionality to components\n * Looks for change in \"isActive\" to automatically boot\n * Otherwise can be set manually\n */\n/* @vue/component */\nexport default Vue.extend<Vue & Toggleable>().extend({\n  name: 'bootable',\n\n  props: {\n    eager: Boolean,\n  },\n\n  data: () => ({\n    isBooted: false,\n  }),\n\n  computed: {\n    hasContent (): boolean | undefined {\n      return this.isBooted || this.eager || this.isActive\n    },\n  },\n\n  watch: {\n    isActive () {\n      this.isBooted = true\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if ('lazy' in this.$attrs) {\n      removed('lazy', this)\n    }\n  },\n\n  methods: {\n    showLazyContent (content?: VNode[]): VNode[] | undefined {\n      return this.hasContent ? content : undefined\n    },\n  },\n})\n"],"sourceRoot":""}]}